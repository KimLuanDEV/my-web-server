
let countdownDuration = 40; // s·ªë gi√¢y m·ªói phi√™n
let lastSpinTime = parseInt(localStorage.getItem("lastSpinTime")) || Date.now();
let pauseAfterSpin = false;
let pauseTimer = 0;
let autoInterval;


let spinCount = parseInt(localStorage.getItem("spinCount")) || 0;
let wheelRotation = 0;
let spinInterval;
let isSpinning = false;
// L·∫•y balance t·ª´ localStorage (n·∫øu c√≥)
let balance = parseInt(localStorage.getItem("balance")) || 0;
let jackpot = parseInt(localStorage.getItem("jackpot")) || 0;
let netProfit = parseInt(localStorage.getItem("netProfit")) || 0; // Ch√™nh l·ªách xu l·ªùi
let netLoss = parseInt(localStorage.getItem("netLoss")) || 0;   // Ch√™nh l·ªách xu l·ªó
let currentChip = 0; // chip ƒëang ch·ªçn
let bets = {}; // l∆∞u tr·ªØ c∆∞·ª£c hi·ªán t·∫°i // l∆∞u s·ªë xu ƒë·∫∑t c∆∞·ª£c theo t·ª´ng c·ª≠a

const SPIN_DURATION = 40; // 40 gi√¢y 1 phi√™n
const spinCounterEl = document.getElementById("spinCounter");
const balanceEl = document.getElementById("balance");
const jackpotEl = document.getElementById("jackpot");
const notificationEl = document.getElementById("notification");
const historyEl = document.getElementById("history");
const betHistoryEl = document.getElementById("betHistory");
const JACKPOT_THRESHOLD = 5000;
const JACKPOT_CHANCE = 0.005;
const wheelEl = document.getElementById("wheel");
const options = [
    { name: "Chua", icon: "üçÖ", weight: 19.2, reward: 5 },
    { name: "C·∫£i", icon: "ü•¨", weight: 19.2, reward: 5 },
    { name: "Ng√¥", icon: "üåΩ", weight: 19.2, reward: 5 },
    { name: "R·ªët", icon: "ü•ï", weight: 19.2, reward: 5 },
    { name: "M·ª≥", icon: "üå≠", weight: 10, reward: 10 },
    { name: "Xi√™n", icon: "üç¢", weight: 6.67, reward: 15 },
    { name: "ƒê√πi", icon: "üçñ", weight: 4, reward: 25 },
    { name: "B√≤", icon: "ü•©", weight: 2.53, reward: 45 },
];



// H√†m th√™m l·ªãch s·ª≠ ƒë·∫∑t c∆∞·ª£c
function addBetHistory(betName, amount, result = "Ch·ªù k·∫øt qu·∫£", payout = 0) {
    const time = new Date().toLocaleTimeString();
    const spin = getCurrentSpinNumber(); // s·ªë phi√™n hi·ªán t·∫°i
    const entry = { time, spin, betName, amount, result, payout };

    let betHistory = JSON.parse(localStorage.getItem("betHistory")) || [];
    betHistory.push(entry);
    localStorage.setItem("betHistory", JSON.stringify(betHistory));

    renderBetHistory(); // c·∫≠p nh·∫≠t UI ngay
}

function renderBetHistory() {
    let betHistory = JSON.parse(localStorage.getItem("betHistory")) || [];
    const modalEl = document.getElementById("modalBetHistory");
    if (!modalEl) return; // n·∫øu modal ch∆∞a load

    modalEl.innerHTML = "";

    if (betHistory.length === 0) {
        modalEl.innerHTML = "<p>‚ö†Ô∏è Ch∆∞a c√≥ l·ªãch s·ª≠ c∆∞·ª£c n√†o.</p>";
        return;
    }

    betHistory.forEach(entry => {
        modalEl.innerHTML += `
  <div style="margin-bottom:8px; border-bottom:1px solid #444; padding-bottom:5px;">
  ‚è∞ ${entry.time} | üéØ Phi√™n ${entry.spin}<br>
  üëâ ƒê·∫∑t <b>${entry.amount}</b> xu v√†o <b>${entry.betName}</b><br>
  üèÜ K·∫øt qu·∫£: ${entry.result} | üí∞ Xu nh·∫≠n: ${entry.payout}
  </div>
    `;
    });
}

// Kh√¥i ph·ª•c khi load l·∫°i trang
window.addEventListener("load", () => {

    let betHistory = JSON.parse(localStorage.getItem("betHistory")) || [];
    betHistoryEl.innerHTML = " <b></b>";
    betHistory.forEach(entry => {
        betHistoryEl.innerHTML += `‚è∞ ${entry.time} - ƒê·∫∑t ${entry.amount} xu v√†o ${entry.betName}<br>`;
    });
    document.querySelectorAll('.chip, .bet-box').forEach(el => el.classList.remove('lock-bets'));

    resetHistoryDaily();   // ch·ªâ x√≥a khi sang ng√†y
    renderBetHistory();    // hi·ªÉn th·ªã l·∫°i ngay l·∫≠p t·ª©c
    updateBalanceDisplay();
    updateJackpotDisplay();
    updateStatsDisplay();
    restoreBets();
});


function resetHistoryDaily() {
    let today = new Date().toLocaleDateString();
    let savedDate = localStorage.getItem("betHistoryDate");
    if (savedDate !== today) {
        localStorage.setItem("betHistory", JSON.stringify([])); // reset r·ªóng, KH√îNG remove h·∫≥n
        localStorage.setItem("betHistoryDate", today);
    }
}
resetHistoryDaily();


// L·∫•y m·ªëc 0h h√¥m nay
function getStartOfDay() {
    const now = new Date();
    return new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0, 0).getTime();
}

// T√≠nh s·ªë phi√™n hi·ªán t·∫°i
function getCurrentSpinNumber() {
    const startTime = getStartOfDay();
    const now = Date.now();
    const elapsedSeconds = Math.floor((now - startTime) / 1000);
    return Math.floor(elapsedSeconds / countdownDuration) + 1;
}




document.querySelectorAll('#betForm input').forEach(input => {
    input.addEventListener('input', updateTotalBetDisplay);
});


// N·∫øu ch∆∞a c√≥ th√¨ set m·ªëc ban ƒë·∫ßu
if (!lastSpinTime) {
    lastSpinTime = Date.now();
    localStorage.setItem("lastSpinTime", lastSpinTime);
}

// T√≠nh th·ªùi gian c√≤n l·∫°i khi load l·∫°i trang
function getRemainingTime() {
    const startTime = getStartOfDay();
    const now = Date.now();
    const elapsedSeconds = Math.floor((now - startTime) / 1000);
    const remaining = countdownDuration - (elapsedSeconds % countdownDuration);
    return remaining;


    if (remaining <= 0) {
        lastSpinTime = now;
        localStorage.setItem("lastSpinTime", lastSpinTime);
        remaining = countdownDuration;
    }
    return remaining;
}

let countdownValue = getRemainingTime();
//Hi·ªÉn th·ªã ngay khi load
renderCountdown();

// H√†m render ra giao di·ªán ngay l·∫≠p t·ª©c
function renderCountdown() {
    const countdownEl = document.getElementById("autoCountdown");
    countdownEl.innerHTML = `<span id="countdownValue">${countdownValue}</span>`;
}



// Hi·ªÉn th·ªã ƒë·∫øm ng∆∞·ª£c
function startCountdown() {
    const timer = setInterval(() => {
        countdownValue = getRemainingTime();
        const countdownEl = document.getElementById("autoCountdown");
        const spinNumber = getCurrentSpinNumber();

        // N·∫øu ƒëang trong th·ªùi gian ch·ªù sau khi quay
        if (pauseAfterSpin) {
            if (pauseTimer > 0) {
                countdownEl.innerHTML = `<span>${pauseTimer}</span>`;
                countdownEl.classList.add("blink-yellow"); // v√†ng nh·∫•p nh√°y
                pauseTimer--;
                // l∆∞u l·∫°i s·ªë gi√¢y c√≤n ch·ªù
                localStorage.setItem("pauseTimer", pauseTimer);
            }
            else {
                pauseAfterSpin = false;
                localStorage.setItem("pauseAfterSpin", "false");
                localStorage.removeItem("pauseTimer");
                countdownValue = 35; // reset v·ªÅ 35 gi√¢y
                countdownEl.classList.remove("blink-yellow");
                renderCountdown(); // hi·ªÉn th·ªã l·∫°i
                countdownEl.innerHTML = `<span id="countdownValue">${countdownValue}</span>`;
            }
            return;
        }
        countdownValue--;
        countdownEl.textContent = `${countdownValue}`;
        countdownEl.innerHTML = `<span id="countdownValue">${countdownValue}</span>`;
        if (countdownValue === 20) {
            suggestResult();
        }
        if (countdownValue <= 5) {
            countdownEl.classList.add("blink"); // ƒë·ªè nh·∫•p nh√°y
            window.addEventListener("keydown", disableF5);
            window.addEventListener("beforeunload", blockReload);
        }
        else {
            countdownEl.classList.remove("blink");
        }


        if (countdownValue <= 0) {
            lockDoors();   // kh√≥a ƒë·∫∑t c∆∞·ª£c
            if (!isSpinning) {
                spinWheel();
                startDoorAnimation();
            }

            // Sau khi quay th√¨ pause 4 gi√¢y
            pauseAfterSpin = true;
            pauseTimer = 4;
            // l∆∞u tr·∫°ng th√°i v√†o localStorage
            localStorage.setItem("pauseAfterSpin", "true");
            localStorage.setItem("pauseTimer", pauseTimer);

            countdownEl.classList.remove("blink"); // t·∫Øt ƒë·ªè nh·∫•p nh√°y
            lastSpinTime = Date.now();
            localStorage.setItem("lastSpinTime", lastSpinTime);
            countdownValue = countdownDuration;
        }
        renderCountdown(); // c·∫≠p nh·∫≠t m·ªói gi√¢y
        countdownEl.innerHTML = `<span id="countdownValue">${countdownValue}</span>`;
        // C·∫≠p nh·∫≠t s·ªë phi√™n (n·∫øu c·∫ßn hi·ªÉn th·ªã)
        document.getElementById("spinCounter").textContent = `Phi√™n: ${spinNumber}`;
    }, 1000);
}
startCountdown();


function suggestResult() {
    const totalWeight = options.reduce((sum, opt) => sum + opt.weight, 0);
    let rand = Math.random() * totalWeight;
    let cumWeight = 0;
    let chosen = null;

    for (let opt of options) {
        cumWeight += opt.weight;
        if (rand <= cumWeight) {
            chosen = opt;
            break;
        }
    }
    if (chosen) {
        /* const hotText = `üî• Hot: ${chosen.name} ${chosen.icon}`;*/
        /*
        //  1) Hi·ªÉn th·ªã ·ªü khu v·ª±c suggestion
          document.getElementById("suggestion").textContent = hotText;
        */
        //  2) L∆∞u l·∫°i v√†o localStorage
        /* localStorage.setItem("lastHot", hotText);*/
        localStorage.setItem("lastHotName", chosen.name);

        // 3) X√≥a nh√£n c≈© trong bet-box & c·ª≠a
        document.querySelectorAll(".bet-box .hot-label").forEach(el => el.remove());
        document.querySelectorAll(".door .hot-label").forEach(el => el.remove());


        //Hi·ªÉn th·ªã ·ªü bet-box
        const box = document.querySelector(`.bet-box[data-name="${chosen.name}"]`);
        if (box) {
            const label = document.createElement("div");
            label.className = "hot-label";
            label.textContent = `üî• Hot`;
            box.prepend(label);
        }


        //Hi·ªÉn th·ªã tr√™n √¥ quay th∆∞·ªüng
        const door = document.querySelector(`.door[data-name="${chosen.name}"]`);
        if (door) {
            const label = document.createElement("div");
            label.className = "hot-label";
            label.textContent = "üî• Hot";
            door.appendChild(label);
        }
    }
}

//Khi load l·∫°i trang, hi·ªÉn th·ªã l·∫°i Hot n·∫øu c√≥
const savedHot = localStorage.getItem("lastHot");
if (savedHot) {
    document.getElementById("suggestion").textContent = savedHot;
}

const savedHotName = localStorage.getItem("lastHotName");
if (savedHotName) {
    // X√≥a Hot c≈©
    document.querySelectorAll(".bet-box .hot-label").forEach(el => el.remove());
    document.querySelectorAll(".door .hot-label").forEach(el => el.remove());
    // Hi·ªÉn th·ªã l·∫°i ·ªü bet-box
    const betBox = document.querySelector(`.bet-box[data-name="${savedHotName}"]`);
    if (betBox) {
        const label = document.createElement("div");
        label.className = "hot-label";
        label.textContent = "üî• Hot";
        betBox.prepend(label);
    }
    // Hi·ªÉn th·ªã l·∫°i ·ªü c·ª≠a quay th∆∞·ªüng
    const door = document.querySelector(`.door[data-name="${savedHotName}"]`);
    if (door) {
        const label = document.createElement("div");
        label.className = "hot-label";
        label.textContent = "üî• Hot";
        door.appendChild(label);
    }
}

function updateBalance() {
    document.getElementById("balance").textContent = balance;
}

// Hi·ªÉn th·ªã giao di·ªán r√∫t xu
document.getElementById("withdrawBtn").onclick = () => {
    document.getElementById("withdrawInfoModal").style.display = "flex";
};

document.getElementById("closeWithdrawModal").onclick = () => {
    document.getElementById("withdrawInfoModal").style.display = "none";
};



// X·ª≠ l√Ω r√∫t xu
document.getElementById("sendWithdrawBtn").onclick = () => {
    const name = document.getElementById("userName").value;
    const bank = document.getElementById("bankName").value;
    const account = document.getElementById("userAccount").value;
    const amount = parseInt(document.getElementById("withdrawAmount").value);
    const status = document.getElementById("withdrawStatus");

    if (!name || !bank || !account || !amount || amount <= 0) {
        status.textContent = "‚ö†Ô∏è Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin.";
        status.style.color = "red";
        return;
    }

    if (amount > balance) {
        status.textContent = "‚ö†Ô∏è S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ r√∫t.";
        status.style.color = "red";
        return;
    }

    // Tr·ª´ xu ngay khi g·ª≠i y√™u c·∫ßu
    balance -= amount;
    updateBalanceDisplay();

    // Hi·ªán tr·∫°ng th√°i ch·ªù x·ª≠ l√Ω
    status.style.color = "orange";
    status.textContent = "‚è≥ G·ª≠i y√™u c·∫ßu th√†nh c√¥ng, h·ªá th·ªëng ƒëang x·ª≠ l√Ω...";

    // Th·ªùi gian x·ª≠ l√Ω ng·∫´u nhi√™n t·ª´ 90s -> 120s
    let wait = Math.floor(Math.random() * (120 - 90 + 1)) + 90; // random 90-120 gi√¢y

    const countdown = setInterval(() => {
        wait--;
        status.textContent = `‚è≥ H·ªá th·ªëng ƒëang x·ª≠ l√Ω...`;
        if (wait <= 0) {
            clearInterval(countdown);
            status.textContent = "‚úÖ R√∫t xu th√†nh c√¥ng!";
            status.style.color = "lightgreen";
            document.getElementById("notification").textContent = `R√∫t xu -${amount} th√†nh c√¥ng, ti·ªÅn ƒëang ƒë∆∞·ª£c chuy·ªÉn t·ªõi t√†i kho·∫£n.`;

            // T·∫Øt notification sau 10s
            setTimeout(() => {
                document.getElementById("notification").textContent = "";
            }, 10000);


            // ·∫®n modal sau 5s
            setTimeout(() => {
                document.getElementById("withdrawInfoModal").style.display = "none";
                status.textContent = "";
            }, 5000);
        }
    }, 1000);
};


function showBankInfo() {
    const amount = parseInt(document.getElementById("amount").value) || 0;
    if (amount > 0) {
        document.getElementById("bankInfo").style.display = "block";
        document.getElementById("depositStatus").textContent = 'B·∫•m g·ª≠i y√™u c·∫ßu n·∫°p sau khi chuy·ªÉn kho·∫£n.';
    } else {
        alert("Vui l√≤ng nh·∫≠p s·ªë xu mu·ªën n·∫°p!");
    }
}

function sendDepositRequest() {
    const amount = parseInt(document.getElementById("amount").value) || 0;
    if (amount > 0) {
        if (confirm(` X√°c nh·∫≠n chuy·ªÉn kho·∫£n th√†nh c√¥ng !`)) {
            // Hi·ªán th√¥ng tin ng√¢n h√†ng
            document.getElementById("bankInfo").style.display = "block";
            // Tr·∫°ng th√°i ch·ªù
            const status = document.getElementById("depositStatus");
            let timeLeft = 35;
            status.style.color = "orange";
            status.textContent = `‚è≥ G·ª≠i y√™u c·∫ßu th√†nh c√¥ng, h·ªá th·ªëng ƒëang x·ª≠ l√Ω...`;
            // ƒê·∫øm ng∆∞·ª£c 30s r·ªìi c·ªông xu
            const countdown = setInterval(() => {
                timeLeft--;
                if (timeLeft <= 0) {
                    clearInterval(countdown);
                    deposit(amount);
                    status.textContent = `‚úÖ N·∫°p th√†nh c√¥ng ${amount} xu v√†o t√†i kho·∫£n!`;
                    status.style.color = "lightgreen";
                    document.getElementById("notification").textContent = `N·∫°p th√†nh c√¥ng +${amount} xu.`;

                    // Sau 5 gi√¢y ·∫©n giao di·ªán ng√¢n h√†ng
                    setTimeout(() => {
                        document.getElementById("bankInfo").style.display = "none";
                    }, 5000);
                }
            }, 1000);
        }
    } else {
        alert("Vui l√≤ng nh·∫≠p s·ªë xu mu·ªën n·∫°p!");
    }
}


function updateBetDisplay() {
    document.querySelectorAll(".bet-box").forEach(box => {
        const name = box.dataset.name;
        box.querySelector(".bet-amount").textContent = bets[name];
    });

    const total = Object.values(bets).reduce((a, b) => a + b, 0);
    document.getElementById("totalBetDisplay").textContent = `${total}`;
}


function updateJackpotDisplay() {
    const oldVal = parseInt(jackpotEl.textContent.replace(/\D/g, '')) || 0;
    animateNumber(jackpotEl, oldVal, jackpot, 600);
    document.getElementById("jackpotProgress").value = jackpot;
    localStorage.setItem("jackpot", jackpot);
}

function updateBalanceDisplay() {
    const oldVal = parseInt(balanceEl.textContent.replace(/\D/g, '')) || 0;
    animateNumber(balanceEl, oldVal, balance, 600);
    localStorage.setItem("balance", balance);
}

function showNotification(message) {
    notificationEl.textContent = message;
    setTimeout(() => notificationEl.textContent = "", 3000);
}

//H√†m n·∫°p xu.
function confirmDeposit() {
    const amount = parseInt(document.getElementById("amount").value) || 0;
    if (amount <= 0) {
        alert("Vui l√≤ng nh·∫≠p s·ªë xu mu·ªën n·∫°p!");
        return;
    }

    const modal = document.getElementById("depositConfirmModal");
    document.getElementById("depositConfirmText").textContent =
        `B·∫°n c√≥ ch·∫Øc mu·ªën n·∫°p ${amount} xu kh√¥ng?`;

    // Hi·ªán modal v·ªõi hi·ªáu ·ª©ng fade-in
    modal.style.display = "flex";
    modal.classList.remove("hide");
    modal.classList.add("show");

    // N√∫t H·ªßy
    document.getElementById("depositNo").onclick = () => {
        modal.classList.remove("show");
        modal.classList.add("hide");
        setTimeout(() => { modal.style.display = "none"; }, 300); // ƒë·ª£i animation xong
    };

    // N√∫t X√°c nh·∫≠n
    document.getElementById("depositYes").onclick = () => {
        modal.classList.remove("show");
        modal.classList.add("hide");
        setTimeout(() => { modal.style.display = "none"; }, 300);
        startDepositProcess(amount);
    };
}

// H√†m x·ª≠ l√Ω n·∫°p xu sau khi x√°c nh·∫≠n
function startDepositProcess(amount) {
    const code = "NAP" + Math.floor(100000 + Math.random() * 900000);
    const modal = document.getElementById("depositInfoModal");
    const status = document.getElementById("depositStatus");

    // Hi·ªán modal th√¥ng tin n·∫°p
    document.getElementById("depositCode").textContent = code;
    modal.style.display = "flex";
    status.style.color = "orange";
    status.innerHTML = `<br><span id="codeExpiry"></span>`;

    // ƒê·∫øm ng∆∞·ª£c th·ªùi gian h·∫øt h·∫°n (30 ph√∫t)
    let expiryTime = 10 * 60; // 10 ph√∫t
    clearInterval(window.expiryTimer); // n·∫øu tr∆∞·ªõc ƒë√≥ c√≤n ch·∫°y th√¨ h·ªßy
    window.expiryTimer = setInterval(() => {
        expiryTime--;
        if (expiryTime > 0) {
            const minutes = Math.floor(expiryTime / 60);
            const seconds = expiryTime % 60;
            document.getElementById("codeExpiry").textContent =
                `M√£ h·∫øt h·∫°n sau ${minutes}:${seconds.toString().padStart(2, "0")}`;
        } else {
            clearInterval(window.expiryTimer);
            document.getElementById("codeExpiry").textContent = "‚ùå M√£ ƒë√£ h·∫øt h·∫°n!";
            document.getElementById("codeExpiry").style.color = "red";
        }
    }, 1000);
    // Th·ªùi gian x·ª≠ l√Ω n·∫°p (ng·∫´u nhi√™n 60‚Äì90 gi√¢y)
    let wait = Math.floor(Math.random() * (60 - 30 + 1)) + 60;
    clearInterval(window.processTimer); // h·ªßy n·∫øu c√≥ timer c≈©
    window.processTimer = setInterval(() => {
        wait--;
        if (wait > 0) {
            status.innerHTML = `
 <span id="codeExpiry">Code h·∫øt h·∫°n sau: ${Math.floor(expiryTime / 60)}:${(expiryTime % 60).toString().padStart(2, "0")}</span>
 `;
        } else {
            clearInterval(window.processTimer);
            deposit(amount);
            status.innerHTML = `‚úÖ N·∫°p th√†nh c√¥ng ${amount} xu v√†o t√†i kho·∫£n!<br>
 `;
            status.style.color = "lightgreen";
            document.getElementById("notification").textContent = `N·∫°p th√†nh c√¥ng +${amount} xu.`;
            setTimeout(() => {
                document.getElementById("notification").textContent = "";
            }, 10000);
            // Modal fade-out sau 5s
            setTimeout(() => {
                modal.classList.remove("show");
                modal.classList.add("hide");
                setTimeout(() => { modal.style.display = "none"; }, 300);
            }, 5000);
        }
    }, 1000);
    document.getElementById("closeDepositModal").onclick = () => {
        modal.classList.remove("show");
        modal.classList.add("hide");
        setTimeout(() => { modal.style.display = "none"; }, 300);
        clearInterval(window.expiryTimer);
        clearInterval(window.processTimer);
    };
}

function confirmWithdraw() {
    const amount = parseInt(document.getElementById("amount").value);
    const balanceEl = document.getElementById("balance");
    if (isNaN(amount) || amount <= 0) {
        alert("Vui l√≤ng nh·∫≠p s·ªë xu h·ª£p l·ªá ƒë·ªÉ r√∫t.");
        return;
    }
    if (amount > balance) {
        alert("Kh√¥ng th·ªÉ r√∫t xu v√¨ s·ªë d∆∞ kh√¥ng ƒë·ªß.");
        return;
    }
    if (confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën r√∫t ${amount} xu kh√¥ng?`)) {
        balance -= amount;
        balanceEl.textContent = balance;
        document.getElementById("notification").textContent = `R√∫t xu th√†nh c√¥ng -${amount}`;
    }
}

function deposit(amount) {
    balance += amount;
    updateBalanceDisplay();
}

function withdraw(amount) {
    balance -= amount;
    updateBalanceDisplay();
    showNotification(`-${amount} xu ƒë√£ ƒë∆∞·ª£c r√∫t.`);
}






function renderWheel() {
    const angleStep = 360 / options.length;
    wheelEl.innerHTML = ""; // x√≥a c≈©
    options.forEach((opt, index) => {
        const segment = document.createElement("div");
        segment.className = "segment";
        segment.textContent = opt.icon;
        segment.style.transform = `rotate(${index * angleStep}deg) translate(0, -85%)`;
        wheelEl.appendChild(segment);
    });
}
renderWheel();

/// H√†m th√™m k·∫øt qu·∫£ v√†o l·ªãch s·ª≠ (gi·ªØ t·ªëi ƒëa 9)
function addResultToHistory(icon) {
    let Results = JSON.parse(localStorage.getItem("Results")) || [];

    // th√™m k·∫øt qu·∫£ m·ªõi v√†o ƒë·∫ßu m·∫£ng
    Results.unshift(icon);

    // gi·ªõi h·∫°n 9 k·∫øt qu·∫£
    if (Results.length > 9) {
        Results = Results.slice(0, 9);
    }

    // l∆∞u l·∫°i
    localStorage.setItem("Results", JSON.stringify(Results));

    // c·∫≠p nh·∫≠t hi·ªÉn th·ªã
    renderHistory();
}

// L∆∞u l·ªãch s·ª≠ v√†o localStorage
function saveHistory() {
    const data = historyEl.innerHTML.replace(' <b>Result</b><br>', '');
    localStorage.setItem("historyData", data);
}

// Kh√¥i ph·ª•c l·ªãch s·ª≠ khi F5
function loadHistory() {
    const saved = localStorage.getItem("historyData");
    if (saved) {
        historyEl.innerHTML = ' <b>Result</b><br>' + saved;
    }
}

// G·ªçi khi trang load
window.addEventListener("load", loadHistory);

function addHistory(resultIcon) {
    saveHistory();
}

// H√†m hi·ªÉn th·ªã l·ªãch s·ª≠ ra giao di·ªán
function renderHistory() {
    const historyEl = document.getElementById("history");
    historyEl.innerHTML = " <b>Result</b><br>";
    let Results = JSON.parse(localStorage.getItem("Results")) || [];
    Results.forEach(icon => {
        const span = document.createElement("span");
        span.className = "result-item";
        span.textContent = icon + " ";
        historyEl.appendChild(span);
    });

}




// g·ªçi khi t·∫£i l·∫°i trang ƒë·ªÉ load l·ªãch s·ª≠ c≈©
window.onload = () => {
    // c≈©ng load l·∫°i s·ªë d∆∞ ƒë√£ l∆∞u
};

function spinWheel() {
    if (isSpinning) return;
    isSpinning = true;

    document.querySelectorAll('.chip, .bet-box').forEach(chip => chip.classList.add('lock-bets'));
    const resultEl = document.getElementById("result");
    let totalBet = Object.values(bets).reduce((a, b) => a + b, 0);
    for (let key in bets) {
        let val = parseFloat(bets[key]);
        if (isNaN(val) || val < 0) {
            resultEl.textContent = `‚ùå C∆∞·ª£c kh√¥ng h·ª£p l·ªá ·ªü c·ª≠a ${key}`;
            return;
        }
    }
    document.getElementById("spinSound").play();
    resultEl.classList.add("spin-animating");
    setTimeout(() => {
        resultEl.classList.remove("spin-animating");
        highlightWinner(selected.name);
    }, 5000);
    const spinDuration = 5; // gi√¢y
    let countdown = spinDuration;
    const selected = chooseResult();
    const anglePerSegment = 360 / options.length;
    const selectedIndex = options.findIndex(opt => opt.name === selected.name);
    const randomOffset = Math.random() * anglePerSegment; // gi√∫p k·∫øt qu·∫£ tr√¥ng t·ª± nhi√™n h∆°n
    const targetAngle = (360 - (selectedIndex * anglePerSegment + anglePerSegment / 2) % 360);
    const extraSpins = 5;
    const targetRotation = 360 * extraSpins + targetAngle;
    wheelRotation += targetRotation;
    wheelEl.style.transform = `rotate(${wheelRotation}deg)`;
    const animationInterval = setInterval(() => {
        const tempIcon = options[Math.floor(Math.random() * options.length)].icon;
        resultEl.textContent = `${tempIcon}`;
    }, 100);



    const countdownInterval = setInterval(() => {
        countdown--;
        if (countdown <= 0) {
            clearInterval(countdownInterval);
            clearInterval(animationInterval);
            const betAmount = bets[selected.name] || 0;
            const winAmount = betAmount > 0 ? betAmount * selected.reward : 0;
            balance += winAmount; //tr·∫£ th∆∞·ªüng

            // üìù C·∫≠p nh·∫≠t l·ªãch s·ª≠ c∆∞·ª£c (th·∫Øng / thua)
            const finishedSpinId = getCurrentSpinNumber();  // s·ªë phi√™n quay hi·ªán t·∫°i
            let betHistory = JSON.parse(localStorage.getItem("betHistory")) || [];
            betHistory = betHistory.map(entry => {
                if (entry.spin !== finishedSpinId || entry.result !== "Ch·ªù k·∫øt qu·∫£") return entry;
                const isWin = entry.betName === selected.name;
                entry.result = isWin ? "‚úÖ Th·∫Øng" : "‚ùå Thua";
                entry.payout = isWin ? entry.amount * selected.reward : 0;
                return entry;
            });

            localStorage.setItem("betHistory", JSON.stringify(betHistory));
            renderBetHistory(); // ƒë·∫©y v√†o modal

            updateBalanceDisplay();
            const lostAmount = totalBet - winAmount;
            let profitOrLoss = winAmount - totalBet;

            // T√≠ch l≈©y h≈© t·ª´ ph·∫ßn c∆∞·ª£c thua
            if (lostAmount > 0) {
                const jackpotContribution = Math.floor(lostAmount * 0.1); // 10% s·ªë xu thua
                jackpot += jackpotContribution;
                updateJackpotDisplay();
            }
            if (profitOrLoss > 0) {
                netProfit += profitOrLoss;
            }
            else if (profitOrLoss < 0) {
                netLoss += Math.abs(profitOrLoss);
            }
            updateStatsDisplay();
            addResultToHistory(selected.icon);
            let outcome = winAmount > 0 ? `‚úÖ Th·∫Øng ${winAmount}` : `‚ùå Thua`;
            showResultModal(selected, totalBet, winAmount);
            let jackpotWin = 0;
            if (jackpot >= JACKPOT_THRESHOLD && Math.random() < JACKPOT_CHANCE) {
                jackpotWin = Math.floor(jackpot * 0.8);
                jackpot -= jackpotWin;
                balance += jackpotWin;
                updateBalanceDisplay();
                updateJackpotDisplay();
                outcome += ` üéâ N·ªï h≈©! Nh·∫≠n th√™m ${jackpotWin} xu t·ª´ h≈©!`;
                showJackpotEffect();  // Hi·ªÉn th·ªã hi·ªáu ·ª©ng ph√°o hoa + coin bay
            }
            if (totalBet >= 0) {
                resultEl.textContent = `${selected.icon}`;

                // ‚úÖ L∆∞u icon k·∫øt qu·∫£ v√†o localStorage
                localStorage.setItem("lastResultIcon", result.icon);
                localStorage.setItem("lastResult", JSON.stringify(selected));
            }
            addHistory(result.icon);

            // B·∫≠t s√°ng c·∫£ √¥ ƒë·∫∑t c∆∞·ª£c tr√∫ng
            const betBox = document.querySelector(`.bet-box[data-name="${selected.name}"]`);
            if (betBox) {
                betBox.classList.add('highlight-win');
                setTimeout(() => {
                    setTimeout(() => {
                        betBox.classList.remove('highlight-win');
                        unlockBets();
                        document.querySelectorAll('.chip, .bet-box').forEach(chip => chip.classList.remove('lock-bets'));
                        //TƒÉng s·ªë phi√™n quay.
                        spinCount++;
                        document.getElementById("spinCounter").textContent = `üéØ Round: ${spinCount}`;
                        updateSpinCounter();
                        //Reset c∆∞·ª£c.
                        resetBets();
                        unlockDoors();
                        isSpinning = false;
                        adminResult = null;
                        document.getElementById("adminSelect").value = "";

                        clearBets(); // üî• sang v√≤ng m·ªõi th√¨ kh√¥ng gi·ªØ c∆∞·ª£c n·ªØa
                        clearHot();  // üî• X√≥a HOT sau 5 gi√¢y khi ƒë√£ tr·∫£ k·∫øt qu·∫£
                        window.removeEventListener("keydown", disableF5);
                        window.removeEventListener("beforeunload", blockReload);
                    }, 5000);
                    highlightWinner(selected.name);
                }, 0); // b·∫•t s√°ng √¥ tr√∫ng v√† t·∫Øt √¥ tr∆∞·ª£t
            }
            if (winAmount >= 1000) {
                resultEl.classList.add("big-win-effect");
            }
            else if (winAmount > 0) {
                resultEl.classList.add("small-win-effect");
            }
            setTimeout(() => {
                resultEl.classList.remove("big-win-effect", "small-win-effect");
            }, 2000);

            //Hi·ªán th·ªã l·ªãch s·ª≠ c∆∞·ª£c.
            if (totalBet > 0) {
                let betLog = `${new Date().toLocaleTimeString()} - C∆∞·ª£c: `;
                for (let key in bets) {
                    const val = parseFloat(bets[key]) || 0;
                    if (val > 0) betLog += `${key}: ${val} xu, `;
                }
                betLog += `‚Üí K·∫øt qu·∫£: ${selected.icon} - ${outcome}`;
                betHistoryEl.innerHTML += `üßæ ${betLog}<br>`;
            }
        }
    }, 1000);
}

// H√†m c·∫≠p nh·∫≠t giao di·ªán + l∆∞u
function updateSpinCounter() {
    const spinNumber = getCurrentSpinNumber();
    spinCounterEl.textContent = `üéØ Round: ${spinNumber}`;
    /*document.getElementById("spinCounter").textContent = `üéØ Round: ${spinCount}`;
    localStorage.setItem("spinCount", spinCount);
    localStorage.setItem("lastSpinDate", getToday());*/
}

// Khi load trang th√¨ hi·ªÉn th·ªã s·ªë phi√™n ƒë√£ l∆∞u
updateSpinCounter();
setInterval(updateSpinCounter, 1000);

function weightedRandom(items, bets) {
    const adjustedItems = items.map(item => {
        const betAmount = parseFloat(bets[item.name]) || 0;
        let penaltyFactor = 1;
        if (betAmount > 0) {
            penaltyFactor = Math.max(0.2, 1 / (1 + betAmount / 10000000));
        }
        return { ...item, weight: item.weight * penaltyFactor };
    });
    const totalWeight = adjustedItems.reduce((sum, item) => sum + item.weight, 0);


    //Random k·∫øt qu·∫£.
    let rand = Math.random() * totalWeight;
    let cumWeight = 0;
    for (let item of adjustedItems) {
        cumWeight += item.weight;
        if (rand <= cumWeight) {
            return item;
        }
    }
}

function confirmSpin() {
    const form = document.getElementById("betForm");
    const formData = new FormData(form);
    let totalBet = 0;
    for (const [key, value] of formData.entries()) {
        totalBet += parseInt(value || 0);
    }
    if (totalBet <= 0) {
        alert("Vui l√≤ng ƒë·∫∑t c∆∞·ª£c tr∆∞·ªõc khi quay.");
        return;
    }
    if (confirm(`T·ªïng s·ªë xu ƒë√£ ƒë·∫∑t c∆∞·ª£c: ${totalBet}.\nB·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën quay th∆∞·ªüng?`)) {
        spinWheel();
    }
}

/*//auto quay
  let autoTime = 35;
  let autoInterval;
  let pauseAfterSpin = false;
  let pauseTimer = 0;

  function startAutoSpinTimer() {
  autoInterval = setInterval(() => {
  const countdownEl = document.getElementById("autoCountdown");
// N·∫øu ƒëang trong th·ªùi gian ch·ªù sau khi quay
  if (pauseAfterSpin) {
  if (pauseTimer > 0) {
  countdownEl.textContent = `‚è≥ ƒêang ch·ªù k·∫øt qu·∫£... ${pauseTimer}s`;
  countdownEl.classList.add("blink-yellow"); // v√†ng nh·∫•p nh√°y
  pauseTimer--;
  } 
  else {
  autoTime = 35; // reset v·ªÅ 35 gi√¢y
  pauseAfterSpin = false;
  countdownEl.classList.remove("blink-yellow");
  countdownEl.textContent = `‚è≥ Quay th∆∞·ªüng sau: ${autoTime} gi√¢y`;
  }
  return;
  }
// B√¨nh th∆∞·ªùng ƒë·∫øm ng∆∞·ª£c 35s
  autoTime--;
  countdownEl.textContent = `‚è≥ Quay th∆∞·ªüng sau: ${autoTime} gi√¢y`;
  if (autoTime === 20) {
    suggestResult();
  }
  if (autoTime <= 5) {
  countdownEl.classList.add("blink"); // ƒë·ªè nh·∫•p nh√°y
  } 
  else {
  countdownEl.classList.remove("blink");
  }
  if (autoTime <= 0) {
  if (!isSpinning) {
  spinWheel();
  }

// Sau khi quay th√¨ pause 4 gi√¢y
  pauseAfterSpin = true;
  pauseTimer = 4;
  countdownEl.classList.remove("blink"); // t·∫Øt ƒë·ªè nh·∫•p nh√°y
  }
  }, 1000);
}*/

window.onload = function () {
    updateBalanceDisplay();
    updateJackpotDisplay();
    startAutoSpinTimer();
};

function showJackpotEffect() {
    const container = document.getElementById("jackpotEffect");
    container.innerHTML = "";
    // Coin bay xi√™n
    for (let i = 0; i < 20; i++) {
        const coin = document.createElement("div");
        coin.className = "coin";
        const x = `${(Math.random() - 0.5) * 300}px`;
        const y = `${-150 - Math.random() * 200}px`;
        coin.style.left = `${50 + Math.random() * 30 - 15}%`;
        coin.style.bottom = `0`;
        coin.style.setProperty('--x', x);
        coin.style.setProperty('--y', y);
        container.appendChild(coin);
    }
    // Fireworks nhi·ªÅu m√†u
    const colors = ['#ff0', '#f0f', '#0ff', '#f55', '#5f5', '#55f', '#ffa500'];
    for (let i = 0; i < 10; i++) {
        const fw = document.createElement("div");
        fw.className = "firework";
        fw.style.left = `${40 + Math.random() * 20}%`;
        fw.style.top = `${30 + Math.random() * 30}%`;
        fw.style.setProperty('--color', colors[Math.floor(Math.random() * colors.length)]);
        container.appendChild(fw);
    }
    // M∆∞a xu
    for (let i = 0; i < 30; i++) {
        const rain = document.createElement("div");
        rain.className = "rain-coin";
        rain.style.left = `${Math.random() * 100}%`;
        rain.style.animationDuration = `${2 + Math.random() * 2}s`;
        rain.style.animationDelay = `${Math.random() * 0.5}s`;
        container.appendChild(rain);
    }
    // Xo√° hi·ªáu ·ª©ng sau 3 gi√¢y
    setTimeout(() => container.innerHTML = "", 3000);
}

function updateTimeDisplay() {
    const now = new Date();
    const timeString = now.toLocaleTimeString('vi-VN', { hour12: false });
    document.getElementById("currentTime").textContent = timeString;
}
setInterval(updateTimeDisplay, 1000);
updateTimeDisplay(); // ch·∫°y ngay khi load

function updateStatsDisplay() {
    const profitEl = document.querySelector(".stat-value.profit");
    const lossEl = document.querySelector(".stat-value.loss");

    const oldProfit = parseInt(profitEl.textContent.replace(/\D/g, '')) || 0;
    const oldLoss = parseInt(lossEl.textContent.replace(/\D/g, '')) || 0;

    animateNumber(profitEl, oldProfit, netProfit, 600);
    animateNumber(lossEl, oldLoss, netLoss, 600);

    localStorage.setItem("netProfit", netProfit);
    localStorage.setItem("netLoss", netLoss);
}
updateStatsDisplay(); // g·ªçi 1 l·∫ßn khi load trang

function resetStats() {
    if (confirm("Reset th·ªëng k√™ l√£i/l·ªó?")) {
        netProfit = 0;
        netLoss = 0;
        updateStatsDisplay();
    }
}

function updateJackpotDisplay() {
    jackpotEl.textContent = jackpot.toFixed(0);
    localStorage.setItem("jackpot", jackpot); // üî• l∆∞u l·∫°i jackpot
    document.getElementById("jackpotProgress").value = jackpot;
}

// üîπ Hi·ªÉn th·ªã ngay khi load trang
updateJackpotDisplay();

if (jackpot >= JACKPOT_THRESHOLD) {
    document.querySelector('button[onclick="confirmSpin()"]').classList.add('glow');
}


// --- CHIP CH·ªåN TI·ªÄN C∆Ø·ª¢C ---

// Kh·ªüi t·∫°o c∆∞·ª£c = 0 cho t·∫•t c·∫£
document.querySelectorAll(".bet-box").forEach(box => {
    bets[box.dataset.name] = 0;
});


// --- ch·ªçn chip ---
document.querySelectorAll(".chip").forEach(chip => {
    chip.addEventListener("click", () => {
        document.querySelectorAll(".chip").forEach(c => c.classList.remove("active"));
        chip.classList.add("active");
        currentChip = parseInt(chip.dataset.value);
    });
});


// --- ƒë·∫∑t c∆∞·ª£c b·∫±ng click √¥ ---
document.querySelectorAll(".bet-box").forEach(box => {
    box.addEventListener("click", () => {
        if (!currentChip) {
            alert("H√£y ch·ªçn m·ªánh gi√° chip tr∆∞·ªõc!");
            return;
        }
        if (balance < currentChip) {
            alert("Kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c!");
            return;
        }
        if (currentChip > 0) {
            const name = box.dataset.name;
            bets[name] = Number(bets[name] || 0) + Number(currentChip);
            balance -= currentChip;
            updateBalanceDisplay();
            updateBetDisplay();
            saveBets();  // üî• l∆∞u l·∫°i ngay
        }
    });
});

document.querySelectorAll(".door").forEach(door => {
    door.addEventListener("click", () => {
        if (!currentChip) {
            alert("H√£y ch·ªçn m·ªánh gi√° chip tr∆∞·ªõc!");
            return;
        }
        if (balance < currentChip) {
            alert("Kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c!");
            return;
        }
        const name = door.dataset.name;
        if (!bets[name]) bets[name] = 0;
        bets[name] += currentChip;
        const betDisplay = door.querySelector(".bet-display");
        betDisplay.textContent = bets[name];
        localStorage.setItem("currentBets", JSON.stringify(bets));
        balance -= currentChip;
        updateBalanceDisplay();
    });
});


// --- reset c∆∞·ª£c ---
function resetBets() {
    bets = {}; // reset object l∆∞u c∆∞·ª£c
    document.querySelectorAll(".door .bet-display").forEach(el => {
        el.textContent = "0"; // reset hi·ªÉn th·ªã v·ªÅ 0
    });
    localStorage.removeItem("currentBets"); // n·∫øu b·∫°n c√≥ l∆∞u v√†o localStorage
    for (let k in bets) bets[k] = 0;
    updateBetDisplay();
}

// L·∫•y ng√†y hi·ªán t·∫°i (yyyy-mm-dd)
function getToday() {
    let d = new Date();
    return d.getFullYear() + "-" + (d.getMonth() + 1) + "-" + d.getDate();
}

// L·∫•y ng√†y cu·ªëi c√πng l∆∞u trong localStorage
let lastDate = localStorage.getItem("lastSpinDate");

// N·∫øu kh√°c ng√†y ‚Üí reset v·ªÅ 0
if (lastDate !== getToday()) {
    spinCount = 0;
    localStorage.setItem("spinCount", spinCount);
    localStorage.setItem("lastSpinDate", getToday());
}

// --- L∆∞u c∆∞·ª£c v√†o localStorage ---
function saveBets() {
    localStorage.setItem("currentBets", JSON.stringify(bets));
    localStorage.setItem("totalBet", document.getElementById("totalBetDisplay").textContent);
}

// --- Kh√¥i ph·ª•c c∆∞·ª£c khi load l·∫°i ---
function restoreBets() {
    const savedBets = JSON.parse(localStorage.getItem("currentBets")) || {};
    bets = savedBets;
    Object.keys(bets).forEach(name => {
        bets[name] = Number(bets[name]); // √©p v·ªÅ s·ªë
        const bet = document.querySelector(`.bet-box[data-name="${name}"] .bet-amount`);
        if (bet) bet.textContent = bets[name];

        document.querySelectorAll(".door").forEach(door => {
            const name = door.dataset.name;
            const betDisplay = door.querySelector(".bet-display");
            betDisplay.textContent = bets[name] || 0;
        });
    });

    // T·ªïng c∆∞·ª£c
    const savedTotal = localStorage.getItem("totalBet");
    if (savedTotal) {
        document.getElementById("totalBetDisplay").textContent = savedTotal;
    }
}

// --- Reset c∆∞·ª£c sau khi quay ---
function clearBets() {
    bets = {};
    document.querySelectorAll(".bet-amount").forEach(el => el.textContent = "0");
    document.getElementById("totalBetDisplay").textContent = "";
    localStorage.removeItem("currentBets");
    localStorage.removeItem("totalBet");
}

// G·ªçi restore khi trang v·ª´a load
window.addEventListener("load", restoreBets);
window.addEventListener("load", () => {
    let savedResult = localStorage.getItem("lastResult");
    if (savedResult) {
        let selected = JSON.parse(savedResult);
        document.getElementById("result").innerHTML =
            `${selected.icon}`;

        const savedResult = localStorage.getItem("lastResult");
        if (savedResult) {
            startDoorAnimation(parseInt(savedResult, 10));
        }

    }
});

function startDoorAnimation(callback) {
    const doors = document.querySelectorAll(".door");
    if (!doors.length) return;
    // L√†m t·ªëi t·∫•t c·∫£
    doors.forEach(d => d.classList.add("dim"));
    let index = 0;
    const interval = setInterval(() => {
        // T·∫Øt s√°ng
        doors.forEach(d => d.classList.remove("highlight"));
        // S√°ng c·ª≠a hi·ªán t·∫°i
        doors[index].classList.add("highlight");
        index = (index + 1) % doors.length;
    }, 100); // ƒë·ªïi c·ª≠a m·ªói 0.1s
    // Sau 5 gi√¢y th√¨ d·ª´ng
    setTimeout(() => {
        clearInterval(interval);
        doors.forEach(d => d.classList.remove("highlight", "dim"));
        if (callback) callback();
    }, 5000);
}


function highlightWinner(winnerName) {
    const doors = document.querySelectorAll(".door");
    doors.forEach(d => d.classList.remove("winner"));
    doors.forEach(door => {
        const img = door.querySelector("img");
        if (img && img.alt === winnerName) {   // so s√°nh theo alt
            door.classList.add("winner");
        }
        door.classList.add("dim"); // l√†m m·ªù t·∫•t c·∫£
        if (door.dataset.name === winnerName) {
            door.classList.remove("dim"); // b·ªè m·ªù √¥ tr√∫ng
            door.classList.add("highlight"); // s√°ng √¥ tr√∫ng
        } else {
            door.classList.remove("highlight");
        }
    });
    // Sau 5s reset l·∫°i b√¨nh th∆∞·ªùng
    setTimeout(() => {
        doors.forEach(door => {
            door.classList.remove("dim", "highlight");
            door.classList.remove("winner");
        });
    }, 5000);
}



function unlockBets() {
    document.querySelectorAll('.chip, .bet-box').forEach(el => {
        el.classList.remove('lock-bets');
    });
    isSpinning = false;
}

window.addEventListener("load", () => {
    // M·ªü kh√≥a chip + bet box khi F5
    document.querySelectorAll('.chip, .bet-box').forEach(el => {
        el.classList.remove('lock-bets');
    });
    // kh√¥i ph·ª•c pause 4s
    const savedPause = localStorage.getItem("pauseAfterSpin") === "true";
    const savedPauseTimer = parseInt(localStorage.getItem("pauseTimer")) || 0;
    if (savedPause && savedPauseTimer > 0) {
        pauseAfterSpin = true;
        pauseTimer = savedPauseTimer;
    } else {
        pauseAfterSpin = false;
        pauseTimer = 0;
    }
});


function clearHot() {
    // X√≥a nh√£n trong bet-box & c·ª≠a
    document.querySelectorAll(".bet-box .hot-label").forEach(el => el.remove());
    document.querySelectorAll(".door .hot-label").forEach(el => el.remove());
    // X√≥a text ·ªü khu v·ª±c suggestion
    document.getElementById("suggestion").textContent = "";
    // X√≥a trong localStorage ƒë·ªÉ l·∫ßn sau suggestResult() s·∫Ω t·∫°o m·ªõi
    localStorage.removeItem("lastHot");
    localStorage.removeItem("lastHotName");
}

function showResultModal(selected, totalBet, winAmount) {
    const modal = document.getElementById("resultModal");
    document.body.style.overflow = "hidden";   // kho√° cu·ªôn

    const spinNumber = getCurrentSpinNumber();
    document.getElementById("modalSpin").textContent = spinNumber;

    document.getElementById("modalResult").textContent = selected.icon;
    document.getElementById("modalWinner").textContent = `${selected.name}`;
    document.getElementById("modalBet").textContent = totalBet;
    document.getElementById("modalWin").textContent = winAmount;

    modal.classList.remove("hide");
    modal.style.display = "flex";

    // d√πng setTimeout ƒë·ªÉ ƒë·∫£m b·∫£o transition ch·∫°y
    setTimeout(() => {
        modal.classList.add("show");
    }, 10);

    // T·ª± ƒë·ªông ·∫©n sau 5 gi√¢y
    setTimeout(() => {
        closeResultModal();
    }, 5000);
}

function closeResultModal() {
    const modal = document.getElementById("resultModal");
    document.body.style.overflow = "";
    modal.classList.remove("show");
    modal.classList.add("hide");

    // Ch·ªù animation xong m·ªõi ·∫©n h·∫≥n
    setTimeout(() => {
        modal.style.display = "none";
        modal.classList.remove("hide");
    }, 400);
}

// ESC ƒë·ªÉ ƒë√≥ng modal
document.addEventListener("keydown", function (event) {
    if (event.key === "Escape") {
        const modal = document.getElementById("resultModal");
        if (modal && modal.style.display !== "none") {
            closeResultModal();
        }
    }
});

// Click ra ngo√†i modal-box ƒë·ªÉ ƒë√≥ng
document.getElementById("resultModal").addEventListener("click", function (e) {
    if (e.target === this) {  // ch·ªâ khi click ƒë√∫ng n·ªÅn ƒëen b√™n ngo√†i
        closeResultModal();
    }
});

function animateNumber(element, start, end, duration = 500) {
    let startTime = null;
    function step(timestamp) {
        if (!startTime) startTime = timestamp;
        const progress = Math.min((timestamp - startTime) / duration, 1);
        const value = Math.floor(progress * (end - start) + start);
        element.textContent = value.toLocaleString("vi-VN") + " ";
        if (progress < 1) {
            requestAnimationFrame(step);
        }
    }
    requestAnimationFrame(step);
    // Hi·ªáu ·ª©ng flash
    element.classList.add("flash-update");
    setTimeout(() => element.classList.remove("flash-update"), 600);
}

function lockDoors() {
    document.querySelectorAll(".door").forEach(door => door.classList.add("locked"));
}

function unlockDoors() {
    document.querySelectorAll(".door").forEach(door => door.classList.remove("locked"));
}


// Kh√≥a chu·ªôt ph·∫£i
document.addEventListener("contextmenu", e => e.preventDefault());

// Ch·∫∑n c√°c ph√≠m t·∫Øt DevTools
document.addEventListener("keydown", function (e) {
    // F12
    if (e.key === "F12") {
        e.preventDefault();
        return false;
    }
    // Ctrl+Shift+I
    if (e.ctrlKey && e.shiftKey && e.key === "I") {
        e.preventDefault();
        return false;
    }
    // Ctrl+Shift+J
    if (e.ctrlKey && e.shiftKey && e.key === "J") {
        e.preventDefault();
        return false;
    }
    // Ctrl+U (view source)
    if (e.ctrlKey && e.key === "u") {
        e.preventDefault();
        return false;
    }
});

let adminResult = null; // null = random, kh√°c null = c·ª≠a do admin ch·ªçn

// L·∫Øng nghe admin ch·ªçn
document.getElementById("adminSelect").addEventListener("change", (e) => {
    adminResult = e.target.value || null;
});
// H√†m ch·ªçn k·∫øt qu·∫£ (hi·ªán t·∫°i d√πng random)
function chooseResult() {
    if (adminResult) {
        // N·∫øu admin ch·ªâ ƒë·ªãnh th√¨ l·∫•y k·∫øt qu·∫£ ƒë√≥
        return options.find(opt => opt.name === adminResult);
    } else {
        // Random nh∆∞ c≈©
        const totalWeight = options.reduce((sum, opt) => sum + opt.weight, 0);
        let rand = Math.random() * totalWeight;
        let cumWeight = 0;
        for (let opt of options) {
            cumWeight += opt.weight;
            if (rand <= cumWeight) return opt;
        }
    }
}

// Drag & Drop cho adminPanel
(function makeDraggable() {
    const panel = document.getElementById("adminPanel");
    let offsetX = 0, offsetY = 0, isDown = false;

    panel.addEventListener("mousedown", (e) => {
        isDown = true;
        offsetX = e.clientX - panel.offsetLeft;
        offsetY = e.clientY - panel.offsetTop;
        panel.style.cursor = "grabbing";
    });
    document.addEventListener("mouseup", () => {
        isDown = false;
        panel.style.cursor = "move";
    });
    document.addEventListener("mousemove", (e) => {
        if (!isDown) return;
        panel.style.left = (e.clientX - offsetX) + "px";
        panel.style.top = (e.clientY - offsetY) + "px";
    });
})();


// B·∫£n ƒë·ªì ph√≠m t·∫Øt ch·ªçn k·∫øt qu·∫£
const hotkeyMap = {
    "0": "",       // Random
    "1": "Chua",
    "2": "C·∫£i",
    "3": "Ng√¥",
    "4": "R·ªët",
    "5": "M·ª≥",
    "6": "Xi√™n",
    "7": "ƒê√πi",
    "8": "B√≤",
};



// Toggle panel b·∫±ng ph√≠m t·∫Øt Ctrl + M
document.addEventListener("keydown", (e) => {
    if (e.ctrlKey && e.shiftKey && e.key.toLowerCase() === "m") {
        e.preventDefault(); // tr√°nh select all
        const panel = document.getElementById("adminPanel");
        panel.style.display = (panel.style.display === "none" || panel.style.display === "")
            ? "block" : "none";
        return;
    }
    // Ch·ªçn k·∫øt qu·∫£ b·∫±ng ph√≠m s·ªë
    if (hotkeyMap.hasOwnProperty(e.key)) {
        const select = document.getElementById("adminSelect");
        select.value = hotkeyMap[e.key];
        adminResult = hotkeyMap[e.key] || null;
    }
});



function disableF5(e) {
    if ((e.which || e.keyCode) === 116) {  // 116 = F5
        e.preventDefault();
        return false;
    }
}

function blockReload(event) {
    event.preventDefault();
    event.returnValue = "";
}

// N√∫t m·ªü modal
document.getElementById("openHistoryBtn").onclick = () => {
    renderBetHistory(); // lu√¥n load m·ªõi nh·∫•t tr∆∞·ªõc khi show
    const modal = document.getElementById("historyBetModal");
    modal.style.display = "flex";
    setTimeout(() => modal.classList.add("show"), 10);
};

// N√∫t ƒë√≥ng modal
document.getElementById("closeHistoryBtn").onclick = () => {
    document.getElementById("historyBetModal").style.display = "none";
};

// ƒê√≥ng modal khi nh·∫•n ESC
document.addEventListener("keydown", (e) => {
    if (e.key === "Escape") {
        const historyModal = document.getElementById("historyBetModal");
        if (historyModal.style.display === "flex") {
            historyModal.style.display = "none";
        }
    }
});

//M≈©i t√™n n·∫°p
const arrow = document.getElementById("openDepositArrow");
const depositModal = document.getElementById("depositInfoModal");
const closeDepositBtn = document.getElementById("closeDepositModal");

arrow.onclick = () => {
    depositModal.style.display = "flex";
    arrow.classList.add("open");
};

closeDepositBtn.onclick = () => {
    depositModal.style.display = "none";
    arrow.classList.remove("open");
};


// Danh s√°ch code h·ª£p l·ªá + s·ªë xu nh·∫≠n ƒë∆∞·ª£c
const codeRewards = {
    "NAP50": 50,
    "NAP100": 100,
    "NAP200": 200,
    "NAP300": 300,
    "NAP400": 400,
    "NAP500": 500,
    "NAP1000": 1000,
    "NAP2000": 2000,
    "NAP3000": 3000,
    "NAP4000": 4000,
    "NAP5000": 5000,
    "NAP10000": 10000,
    "NAP20000": 20000,
    "NAP30000": 30000,
    "NAP40000": 40000,
    "NAP50000": 50000,
};

// L·∫•y danh s√°ch code ƒë√£ s·ª≠ d·ª•ng t·ª´ localStorage
let usedCodes = JSON.parse(localStorage.getItem("usedCodes")) || [];

document.getElementById("verifyDepositCodeBtn").onclick = () => {
    const codeInput = document.getElementById("depositUserCode").value.trim();
    const statusEl = document.getElementById("depositStatus");

    if (!codeInput) {
        statusEl.textContent = "‚ö†Ô∏è Vui l√≤ng nh·∫≠p code!";
        statusEl.style.color = "red";
        return;
    }

    // Ki·ªÉm tra code ƒë√£ d√πng ch∆∞a
    if (usedCodes.includes(codeInput)) {
        statusEl.textContent = "‚ùå M√£ code n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.";
        statusEl.style.color = "red";
        return;
    }

    if (codeRewards[codeInput]) {
        const reward = codeRewards[codeInput];
        balance += reward;
        localStorage.setItem("balance", balance);
        updateBalance();

        statusEl.textContent = `‚úÖ ƒê·ªïi code th√†nh c√¥ng. +${reward} xu v√†o t√†i kho·∫£n.`;
        statusEl.style.color = "lightgreen";

        // L∆∞u l·∫°i code ƒë√£ d√πng
        usedCodes.push(codeInput);
        localStorage.setItem("usedCodes", JSON.stringify(usedCodes));

        document.getElementById("notification").textContent = `üéâ N·∫°p th√†nh c√¥ng +${reward} xu qua code ${codeInput}!`;

        setTimeout(() => {
            document.getElementById("notification").textContent = "";
        }, 10000);

        delete codeRewards[codeInput];
        localStorage.setItem("validCodes", JSON.stringify(validCodes));
    } else {
        statusEl.textContent = "‚ùå Code kh√¥ng h·ª£p l·ªá!";
        statusEl.style.color = "red";
    }
};

let validCodes = JSON.parse(localStorage.getItem("validCodes")) || {};

// H√†m t·∫°o code ng·∫´u nhi√™n
function generateRandomCode(length = 8) {
    const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    let code = "";
    for (let i = 0; i < length; i++) {
        code += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return code;
}


// L·∫•y l·ªãch s·ª≠ ƒë·ªïi code t·ª´ localStorage
let codeHistory = JSON.parse(localStorage.getItem("codeHistory")) || [];

// H√†m hi·ªÉn th·ªã l·ªãch s·ª≠ code
function renderCodeHistory() {
    const listEl = document.getElementById("codeHistoryList");
    if (!listEl) return;

    if (codeHistory.length === 0) {
        listEl.innerHTML = "<p>‚ö†Ô∏è Ch∆∞a c√≥ code n√†o ƒë∆∞·ª£c t·∫°o.</p>";
        return;
    }

    listEl.innerHTML = "";
    codeHistory.slice().reverse().forEach((entry, index) => {
        listEl.innerHTML += `
  <div style="margin-bottom:8px; border-bottom:1px solid #444; padding-bottom:5px; display:flex; justify-content:space-between; align-items:center;">
  <div>
  ‚è∞ ${entry.time}<br>
  üîë <b>${entry.code}</b> | üí∞ ${entry.amount} xu
  </div>
  <button class="copyBtn" data-code="${entry.code}" 
  style="padding:4px 8px; background:gold; color:#000; border:none; border-radius:6px; font-size:0.8em; cursor:pointer;">
  üìã Copy
  </button>
  </div>
  `;
    });
    // G·∫Øn s·ª± ki·ªán copy cho t·∫•t c·∫£ n√∫t
    document.querySelectorAll(".copyBtn").forEach(btn => {
        btn.onclick = () => {
            const code = btn.getAttribute("data-code");
            navigator.clipboard.writeText(code).then(() => {
                btn.textContent = "‚úÖ Copied";
                setTimeout(() => (btn.textContent = "üìã Copy"), 10000);
            });
        };
    });
}

let pendingAmount = 0; // s·ªë xu chu·∫©n b·ªã ƒë·ªïi

// X·ª≠ l√Ω chuy·ªÉn xu th√†nh code
document.getElementById("convertToCodeBtn").onclick = () => {
    const amount = parseInt(document.getElementById("convertAmount").value);
    const statusEl = document.getElementById("generatedCode");

    if (!amount || amount <= 0) {
        statusEl.textContent = "‚ö†Ô∏è Nh·∫≠p s·ªë xu h·ª£p l·ªá.";
        statusEl.style.color = "red";
        return;
    }
    if (amount > balance) {
        statusEl.textContent = "‚ùå S·ªë d∆∞ kh√¥ng ƒë·ªß.";
        statusEl.style.color = "red";
        return;
    }

    // L∆∞u t·∫°m s·ªë xu c·∫ßn ƒë·ªïi
    pendingAmount = amount;


    // Hi·ªÉn th·ªã modal x√°c nh·∫≠n (c√≥ hi·ªáu ·ª©ng)
    document.getElementById("confirmMessage").textContent =
        `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒë·ªïi ${amount} xu th√†nh code kh√¥ng?`;
    const modal = document.getElementById("confirmConvertModal");
    modal.style.display = "flex"; // b·∫≠t flex tr∆∞·ªõc
    setTimeout(() => modal.classList.add("show"), 10); // th√™m class ƒë·ªÉ ch·∫°y animation


    // N·∫øu b·∫•m "Hu·ª∑"
    document.getElementById("confirmNo").onclick = () => {
        const modal = document.getElementById("confirmConvertModal");
        modal.classList.remove("show");
        setTimeout(() => { modal.style.display = "none"; }, 300);
        pendingAmount = 0;
    };

    // N·∫øu b·∫•m "ƒê·ªìng √Ω"
    document.getElementById("confirmYes").onclick = () => {
        if (pendingAmount > 0) {
            createCode(pendingAmount);
        }
        const modal = document.getElementById("confirmConvertModal");
        modal.classList.remove("show");
        setTimeout(() => { modal.style.display = "none"; }, 300);
        pendingAmount = 0;
    };


    function createCode(amount) {
        const statusEl = document.getElementById("generatedCode");

        // Tr·ª´ xu
        balance -= amount;
        updateBalance();

        // Sinh m√£ code
        const newCode = generateRandomCode(10);
        codeRewards[newCode] = amount;

        // L∆∞u v√†o localStorage
        localStorage.setItem("codeRewards", JSON.stringify(validCodes));

        // Hi·ªÉn th·ªã cho ng∆∞·ªùi d√πng copy
        statusEl.textContent = `‚úÖ Code ƒë√£ ƒë∆∞·ª£c chuy·ªÉn v√†o l·ªãch s·ª≠!`;
        statusEl.style.color = "lime";

        // L∆∞u l·ªãch s·ª≠
        const entry = {
            code: newCode,
            amount: amount,
            time: new Date().toLocaleString()
        };
        codeHistory.push(entry);
        localStorage.setItem("codeHistory", JSON.stringify(codeHistory));

        // C·∫≠p nh·∫≠t giao di·ªán l·ªãch s·ª≠
        renderCodeHistory();
    };
}

// M·ªü modal l·ªãch s·ª≠
document.getElementById("openHistoryModal").onclick = () => {
    document.getElementById("historyModal").style.display = "flex";
    renderCodeHistory();
};

// ƒê√≥ng modal
document.getElementById("closeHistoryModal").onclick = () => {
    document.getElementById("historyModal").style.display = "none";
};





// ·∫®n game tr∆∞·ªõc khi login
document.querySelector(".game-container").style.display = "none";

// Chuy·ªÉn form
function showRegister() {
    document.getElementById("loginForm").style.display = "none";
    document.getElementById("registerForm").style.display = "block";
}
function showLogin() {
    document.getElementById("registerForm").style.display = "none";
    document.getElementById("loginForm").style.display = "block";
}



document.addEventListener("DOMContentLoaded", function () {
    let users = JSON.parse(localStorage.getItem("users")) || {};
    // N·∫øu ch∆∞a c√≥ t√†i kho·∫£n admin th√¨ t·∫°o s·∫µn
    if (!users["Greedy"]) {
        users["GreedyKing"] = {
            username: "GreedyKing",
            password: "123456@",   // m·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh
            balance: 0            // s·ªë d∆∞ ban ƒë·∫ßu
        };
        localStorage.setItem("users", JSON.stringify(users));
    }
});


// ƒêƒÉng nh·∫≠p
function handleLogin() {
    const user = document.getElementById("loginUser").value.trim();
    const pass = document.getElementById("loginPass").value.trim();
    const msgEl = document.getElementById("loginMsg");

    let users = JSON.parse(localStorage.getItem("users")) || {};

    if (users[user] && users[user] === pass) {
        localStorage.setItem("loggedIn", "true");
        localStorage.setItem("currentUser", user);
        document.getElementById("loginOverlay").style.display = "none";
        document.querySelector(".game-container").style.display = "flex";
        msgEl.textContent = "";
    } else {
        msgEl.textContent = "‚ùå Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u!";
    }


}

// ƒêƒÉng k√Ω
function handleRegister() {
    const user = document.getElementById("regUser").value.trim();
    const pass = document.getElementById("regPass").value.trim();
    const pass2 = document.getElementById("regPass2").value.trim();
    const msgEl = document.getElementById("registerMsg");

    if (user === "" || pass === "" || pass2 === "") {
        msgEl.style.color = "red";
        msgEl.textContent = "‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß!";
        return;
    }

    if (user.length < 8) {
        msgEl.style.color = "red";
        msgEl.textContent = "‚ö†Ô∏è T√†i kho·∫£n ph·∫£i t·ª´ 8 k√Ω t·ª± tr·ªü l√™n!";
        return;
    }

    if (pass.length < 6) {
        msgEl.style.color = "red";
        msgEl.textContent = "‚ö†Ô∏è M·∫≠t kh·∫©u ph·∫£i t·ª´ 6 k√Ω t·ª± tr·ªü l√™n!";
        return;
    }

    if (pass !== pass2) {
        msgEl.style.color = "red";
        msgEl.textContent = "‚ùå M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!";
        return;
    }

    let users = JSON.parse(localStorage.getItem("users")) || {};
    if (users[user]) {
        msgEl.style.color = "red";
        msgEl.textContent = "‚ö†Ô∏è T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i!";
        return;
    }

    // T·∫°o ID random cho user
    let userId = "U" + Math.floor(100000 + Math.random() * 900000);

    users[user] = {
        id: userId,
        user: user,
        pass: pass,
        balance: 0
    };

    // L∆∞u t√†i kho·∫£n m·ªõi
    users[user] = pass;
    localStorage.setItem("users", JSON.stringify(users));

    // Th√¥ng b√°o th√†nh c√¥ng
    msgEl.style.color = "lime";
    msgEl.textContent = "‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng!";

    // Sau 1.5 gi√¢y t·ª± ƒë·ªông quay v·ªÅ form login
    setTimeout(() => {
        showLogin();
        document.getElementById("loginUser").value = user; // ƒëi·ªÅn s·∫µn username
        document.getElementById("loginPass").focus();
    }, 1500);
}

// ƒêƒÉng xu·∫•t
document.getElementById("logoutBtn").addEventListener("click", () => {
    // X√≥a tr·∫°ng th√°i ƒëƒÉng nh·∫≠p hi·ªán t·∫°i th√¥i
    localStorage.removeItem("currentUser");
    document.querySelector(".game-container").style.display = "none";
    document.getElementById("loginOverlay").style.display = "flex";
    showLogin(); // tr·ªü v·ªÅ form login
});

// Gi·ªØ tr·∫°ng th√°i ƒëƒÉng nh·∫≠p khi load l·∫°i
window.addEventListener("load", () => {
    if (localStorage.getItem("loggedIn") === "true") {
        document.getElementById("loginOverlay").style.display = "flex";
        /*document.querySelector(".game-container").style.display = "flex";*/
    }
});


// H√†m hi·ªÉn th·ªã th√¥ng tin user
function setUserInfo(name, id, avatarUrl) {
    document.getElementById("userNameDisplay").textContent = name;
    document.getElementById("userIdDisplay").textContent = id;
    document.querySelector(".user-avatar").src = avatarUrl;
    document.getElementById("userInfo").style.display = "flex";
}

// T·ª± ƒë·ªông load l·∫°i khi F5
window.addEventListener("load", () => {
    if (localStorage.getItem("userName")) {
        setUserInfo(
            localStorage.getItem("userName"),
            localStorage.getItem("userId"),
            localStorage.getItem("userAvatar")
        );
    }
});


//ƒê·ªïi t√™n
(() => {
    const modal = document.getElementById("changeNameModal");
    const input = document.getElementById("newNameInput");
    const saveBtn = document.getElementById("saveNameBtn");
    const cancelBtn = document.getElementById("cancelNameBtn");
    const counter = document.getElementById("nameCounter");
    const err = document.getElementById("nameError");
    const avatarImg = document.querySelector(".rename-avatar");

    const nameDisplay = document.getElementById("userNameDisplay"); // n∆°i hi·ªÉn th·ªã t√™n hi·ªán t·∫°i
    const openBtn = document.getElementById("changeNameBtn");       // n√∫t m·ªü modal

    // regex: cho ph√©p ch·ªØ (k·ªÉ c·∫£ c√≥ d·∫•u), s·ªë, kho·∫£ng tr·∫Øng; t·ªëi thi·ªÉu 2 k√Ω t·ª± sau khi trim
    const NAME_OK = (s) => {
        const t = s.trim();
        if (t.length < 2 || t.length > 20) return false;
        // kh√¥ng cho to√†n kho·∫£ng tr·∫Øng; cho unicode letter/number/space
        return /^[\p{L}\p{N} ]+$/u.test(t);
    };

    function openModal() {
        // g·ª£i √Ω avatar hi·ªán t·∫°i n·∫øu c√≥
        try {
            const current = (localStorage.getItem("userName") || nameDisplay?.textContent || "").trim();
            input.value = current;
            counter.textContent = `${input.value.length}/20`;
            avatarImg && (avatarImg.src = (localStorage.getItem("userAvatar") || `https://i.pravatar.cc/80?u=${encodeURIComponent(current)}`));
        } catch { }
        err.style.display = "none";
        input.classList.remove("input-error");

        modal.style.display = "flex";
        requestAnimationFrame(() => modal.classList.add("show"));
        setTimeout(() => input.focus(), 50);
    }

    function closeModal() {
        modal.classList.remove("show");
        setTimeout(() => { modal.style.display = "none"; }, 200);
    }

    // m·ªü t·ª´ n√∫t "ƒê·ªïi t√™n"
    if (openBtn) {
        openBtn.addEventListener("click", (e) => {
            e.preventDefault();
            openModal();
        });
    }

    // c·∫≠p nh·∫≠t counter + preview avatar theo t√™n g√µ v√†o
    input.addEventListener("input", () => {
        counter.textContent = `${input.value.length}/20`;
        if (avatarImg) avatarImg.src = `https://i.pravatar.cc/80?u=${encodeURIComponent(input.value.trim() || "preview")}`;
        if (NAME_OK(input.value)) {
            err.style.display = "none";
            input.classList.remove("input-error");
        }
    });

    // L∆∞u
    saveBtn.addEventListener("click", () => {
        const newName = input.value;
        if (!NAME_OK(newName)) {
            err.textContent = "‚ö†Ô∏è T√™n ph·∫£i 2‚Äì20 k√Ω t·ª± (ch·ªØ/s·ªë/kho·∫£ng tr·∫Øng).";
            err.style.display = "block";
            input.classList.add("input-error");
            input.focus();
            return;
        }

        const finalName = newName.trim().replace(/\s+/g, " "); // gom kho·∫£ng tr·∫Øng ƒë√¥i

        // --- x·ª≠ l√Ω ID ---
        let userId = localStorage.getItem("userId");
        if (!userId) {
            userId = "GRD" + Math.floor(10000000 + Math.random() * 900000);
            localStorage.setItem("userId", userId);
        }

        // --- x·ª≠ l√Ω avatar ---
        const newAvatar = `https://i.pravatar.cc/80?u=${encodeURIComponent(finalName)}`;

        // --- l∆∞u v√†o localStorage ---
        localStorage.setItem("userName", finalName);
        localStorage.setItem("userAvatar", newAvatar);

        // --- c·∫≠p nh·∫≠t UI ---
        const nameEl = document.getElementById("userNameDisplay");
        if (nameEl) nameEl.textContent = finalName;

        const idEl = document.getElementById("userIdDisplay");
        if (idEl) idEl.textContent = userId;

        const avatarEl = document.querySelector(".user-avatar");
        if (avatarEl) avatarEl.src = newAvatar;

        closeModal();

        // th√¥ng b√°o
        const note = document.getElementById("notification");
        if (note) {
            note.textContent = `‚úÖ ƒê√£ ƒë·ªïi t√™n th√†nh ‚Äú${finalName}‚Äù`;
            setTimeout(() => (note.textContent = ""), 3000);
        }
    });


    // H·ªßy/ƒë√≥ng
    cancelBtn.addEventListener("click", closeModal);

    // ƒë√≥ng khi click ra ngo√†i
    modal.addEventListener("click", (e) => {
        if (e.target === modal) closeModal();
    });

    // ESC ƒë·ªÉ ƒë√≥ng
    document.addEventListener("keydown", (e) => {
        if (e.key === "Escape" && modal.style.display === "flex") closeModal();
    });
})();

document.addEventListener("DOMContentLoaded", () => {
    // l·∫•y d·ªØ li·ªáu t·ª´ localStorage
    let name = localStorage.getItem("userName");
    let userId = localStorage.getItem("userId");
    let avatar = localStorage.getItem("userAvatar");

    // n·∫øu ch∆∞a c√≥ th√¨ set m·∫∑c ƒë·ªãnh
    if (!name) {
        name = "Ng∆∞·ªùi ch∆°i";
        localStorage.setItem("userName", name);
    }
    if (!userId) {
        userId = "GRD" + Math.floor(10000000 + Math.random() * 900000);
        localStorage.setItem("userId", userId);
    }
    if (!avatar) {
        avatar = `https://i.pravatar.cc/80?u=${encodeURIComponent(userId)}`;
        localStorage.setItem("userAvatar", avatar);
    }

    // g√°n ra UI
    const nameEl = document.getElementById("userNameDisplay");
    if (nameEl) nameEl.textContent = name;

    const idEl = document.getElementById("userIdDisplay");
    if (idEl) idEl.textContent = userId;

    const avatarEl = document.querySelector(".user-avatar");
    if (avatarEl) avatarEl.src = avatar;
});


document.addEventListener("DOMContentLoaded", () => {
    const avatarEl = document.querySelector(".user-avatar");
    const fileInput = document.getElementById("avatarUpload");

    if (avatarEl && fileInput) {
        // Khi click avatar th√¨ m·ªü ch·ªçn file
        avatarEl.addEventListener("click", () => fileInput.click());

        // Khi ch·ªçn ·∫£nh m·ªõi
        fileInput.addEventListener("change", (e) => {
            const file = e.target.files[0];
            if (!file) return;

            const reader = new FileReader();
            reader.onload = function (ev) {
                const newAvatar = ev.target.result; // base64 string

                // c·∫≠p nh·∫≠t UI
                avatarEl.src = newAvatar;
                // l∆∞u v√†o localStorage
                localStorage.setItem("userAvatar", newAvatar);
                // th√¥ng b√°o
                const note = document.getElementById("notification");
                if (note) {
                    note.textContent = "‚úÖ ƒê√£ c·∫≠p nh·∫≠t avatar!";
                    setTimeout(() => (note.textContent = ""), 3000);
                }
            };
            reader.readAsDataURL(file); // chuy·ªÉn ·∫£nh th√†nh base64
        });
    }
});

//X√°c nh·∫≠n chuy·ªÉn xu
document.addEventListener("DOMContentLoaded", function () {
    const transferBtn = document.getElementById("transferCoinBtn");
    const confirmModal = document.getElementById("confirmTransferModal");
    const confirmMsg = document.getElementById("confirmTransferMessage");
    const yesBtn = document.getElementById("confirmTransferYes");
    const noBtn = document.getElementById("confirmTransferNo");

    // Nh·∫•n "X√°c nh·∫≠n" ·ªü form chuy·ªÉn xu
    transferBtn.addEventListener("click", function () {
        let toId = document.getElementById("transferUserId").value.trim();
        let amount = parseInt(document.getElementById("transferAmount").value);

        if (!toId || isNaN(amount) || amount <= 0) {
            document.getElementById("transferStatus").innerText = "‚ö†Ô∏è Vui l√≤ng nh·∫≠p ID v√† s·ªë xu h·ª£p l·ªá!";
            return;
        }
        // Hi·ªÉn th·ªã modal x√°c nh·∫≠n
        confirmMsg.innerText = `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën chuy·ªÉn ${amount} xu cho ID: ${toId}?`;
        confirmModal.style.display = "flex";

        // N·∫øu ƒë·ªìng √Ω
        yesBtn.onclick = function () {
            let users = JSON.parse(localStorage.getItem("users")) || {};
            let currentUser = localStorage.getItem("currentUser");



            let senderBalance = parseInt(users[currentUser].balance) || 0;
            let amount = parseInt(document.getElementById("transferAmount").value);
            let toId = document.getElementById("transferUserId").value.trim();


            if (!users[toId]) {
                document.getElementById("transferStatus").innerText = "‚ùå Ng∆∞·ªùi nh·∫≠n kh√¥ng t·ªìn t·∫°i!";
                confirmModal.style.display = "none";
                return;
            }

            // Ki·ªÉm tra s·ªë d∆∞
            if (balance < amount) {
                document.getElementById("transferStatus").innerText = "‚ùå Kh√¥ng ƒë·ªß xu!";
                confirmModal.style.display = "none";
                return;
            }




            // Tr·ª´ + c·ªông xu 
            balance -= amount;
            users[toId].balance = balance + amount;
            updateBalance();
            updateBalanceDisplay()
            localStorage.setItem("users", JSON.stringify(users));

            // L∆∞u l·ªãch s·ª≠
            let history = JSON.parse(localStorage.getItem("transferHistory")) || [];
            history.push({
                from: currentUser,
                to: toId,
                amount: amount,
                time: new Date().toLocaleString()
            });
            localStorage.setItem("transferHistory", JSON.stringify(history));

            document.getElementById("balance").innerText = users[currentUser].balance;
            document.getElementById("transferStatus").innerText = `‚úÖ ƒê√£ chuy·ªÉn ${amount} xu cho ID: ${toId}`;


            // Reset input sau khi chuy·ªÉn xong
            document.getElementById("transferUserId").value = "";
            document.getElementById("transferAmount").value = "";

            confirmModal.style.display = "none";
        };
        // N·∫øu hu·ª∑
        noBtn.onclick = function () {
            confirmModal.style.display = "none";
        };
    });
});


//L∆∞u v√†o l·ªãch s·ª≠ chuy·ªÉn xu
document.addEventListener("DOMContentLoaded", function () {
    const transferHistoryModal = document.getElementById("transferHistoryModal");
    const transferHistoryList = document.getElementById("transferHistoryList");
    const openHistoryBtn = document.getElementById("openTransferHistoryBtn");
    const closeHistoryBtn = document.getElementById("closeTransferHistoryBtn");

    // H√†m render l·ªãch s·ª≠
    function renderTransferHistory() {
        let history = JSON.parse(localStorage.getItem("transferHistory")) || [];
        if (history.length === 0) {
            transferHistoryList.innerHTML = "<p style='color:gray'>Ch∆∞a c√≥ giao d·ªãch n√†o</p>";
            return;
        }
        transferHistoryList.innerHTML = history.map(h => `
  <div style="margin-bottom:8px; padding:6px; border-bottom:1px solid #444;">
  <b>üë§ T·ª´:</b> ${h.from} <br>
  <b>‚û°Ô∏è ƒê·∫øn:</b> ${h.to} <br>
  <b>üí∞ S·ªë xu:</b> ${h.amount} <br>
  <small>üïí ${h.time}</small>
  </div>
  `).join("");
    }

    // M·ªü modal l·ªãch s·ª≠
    openHistoryBtn.addEventListener("click", function () {
        renderTransferHistory();
        transferHistoryModal.style.display = "flex";
    });

    //ƒê√≥ng modal l·ªãch s·ª≠
    closeHistoryBtn.addEventListener("click", function () {
        transferHistoryModal.style.display = "none";
    });
});


Object.keys(users).forEach(uid => {
    users[uid].balance = Number(users[uid].balance) || 0;
});