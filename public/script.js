let countdownDuration = 40; // s·ªë gi√¢y m·ªói phi√™n
let lastSpinTime = parseInt(localStorage.getItem("lastSpinTime")) || Date.now();
let pauseAfterSpin = false;
let pauseTimer = 0;
let autoInterval;


let spinCount = parseInt(localStorage.getItem("spinCount")) || 0;
let wheelRotation = 0;
let spinInterval;
let isSpinning = false;
// L·∫•y balance t·ª´ localStorage (n·∫øu c√≥)
let balance = parseInt(localStorage.getItem("balance")) || 0;
let jackpot = parseInt(localStorage.getItem("jackpot")) || 0;
let netProfit = parseInt(localStorage.getItem("netProfit")) || 0; // Ch√™nh l·ªách xu l·ªùi
let netLoss = parseInt(localStorage.getItem("netLoss")) || 0;   // Ch√™nh l·ªách xu l·ªó
let currentChip = 0; // chip ƒëang ch·ªçn
let bets = {}; // l∆∞u tr·ªØ c∆∞·ª£c hi·ªán t·∫°i // l∆∞u s·ªë xu ƒë·∫∑t c∆∞·ª£c theo t·ª´ng c·ª≠a

const SPIN_DURATION = 40; // 40 gi√¢y 1 phi√™n
const spinCounterEl = document.getElementById("spinCounter");
const balanceEl = document.getElementById("balance");
const jackpotEl = document.getElementById("jackpot");
const notificationEl = document.getElementById("notification");
const historyEl = document.getElementById("history");
const betHistoryEl = document.getElementById("betHistory");
const JACKPOT_THRESHOLD = 5000;
const JACKPOT_CHANCE = 0.01;
const wheelEl = document.getElementById("wheel");
const options = [
    { name: "Chua", icon: "üçÖ", weight: 19.2, reward: 5 },
    { name: "C·∫£i", icon: "ü•¨", weight: 19.2, reward: 5 },
    { name: "Ng√¥", icon: "üåΩ", weight: 19.2, reward: 5 },
    { name: "R·ªët", icon: "ü•ï", weight: 19.2, reward: 5 },
    { name: "M·ª≥", icon: "üå≠", weight: 10, reward: 10 },
    { name: "Xi√™n", icon: "üç¢", weight: 6.67, reward: 15 },
    { name: "ƒê√πi", icon: "üçñ", weight: 4, reward: 25 },
    { name: "B√≤", icon: "ü•©", weight: 2.53, reward: 45 },
];



// H√†m th√™m l·ªãch s·ª≠ ƒë·∫∑t c∆∞·ª£c
function addBetHistory(betName, amount) {
    const time = new Date().toLocaleTimeString();
    const entry = { time, betName, amount };

    // Th√™m v√†o giao di·ªán
    betHistoryEl.innerHTML += `‚è∞ ${time} - ƒê·∫∑t ${amount} xu v√†o ${betName}<br>`;

    // L∆∞u v√†o localStorage
    let betHistory = JSON.parse(localStorage.getItem("betHistory")) || [];
    betHistory.push(entry);
    localStorage.setItem("betHistory", JSON.stringify(betHistory));
}

// Kh√¥i ph·ª•c khi load l·∫°i trang
window.addEventListener("load", () => {
    let betHistory = JSON.parse(localStorage.getItem("betHistory")) || [];
    if (betHistory.length > 0) {
        betHistoryEl.innerHTML = "üßæ <b>L·ªãch s·ª≠ ƒë·∫∑t c∆∞·ª£c:</b><br>";
        betHistory.forEach(entry => {
            betHistoryEl.innerHTML += `‚è∞ ${entry.time} - ƒê·∫∑t ${entry.amount} xu v√†o ${entry.betName}<br>`;
        });
    }
});

function resetHistoryDaily() {
    let today = new Date().toLocaleDateString();
    let savedDate = localStorage.getItem("betHistoryDate");
    if (savedDate !== today) {
        localStorage.removeItem("betHistory");
        localStorage.setItem("betHistoryDate", today);
    }
}
resetHistoryDaily();

// L·∫•y m·ªëc 0h h√¥m nay
function getStartOfDay() {
    const now = new Date();
    return new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0, 0).getTime();
}

// T√≠nh s·ªë phi√™n hi·ªán t·∫°i
function getCurrentSpinNumber() {
    const startTime = getStartOfDay();
    const now = Date.now();
    const elapsedSeconds = Math.floor((now - startTime) / 1000);
    return Math.floor(elapsedSeconds / SPIN_DURATION) + 1;
}




document.querySelectorAll('#betForm input').forEach(input => {
    input.addEventListener('input', updateTotalBetDisplay);
});


// N·∫øu ch∆∞a c√≥ th√¨ set m·ªëc ban ƒë·∫ßu
if (!lastSpinTime) {
    lastSpinTime = Date.now();
    localStorage.setItem("lastSpinTime", lastSpinTime);
}

// T√≠nh th·ªùi gian c√≤n l·∫°i khi load l·∫°i trang
function getRemainingTime() {
    const now = Date.now();
    const elapsed = Math.floor((now - lastSpinTime) / 1000); // s·ªë gi√¢y ƒë√£ tr√¥i qua
    let remaining = countdownDuration - elapsed;

    if (remaining <= 0) {
        lastSpinTime = now;
        localStorage.setItem("lastSpinTime", lastSpinTime);
        remaining = countdownDuration;
    }
    return remaining;
}

let countdownValue = getRemainingTime();

// H√†m render ra giao di·ªán ngay l·∫≠p t·ª©c
function renderCountdown() {
    const countdownEl = document.getElementById("autoCountdown");
    countdownEl.innerHTML = `<span id="countdownValue">${countdownValue}</span>`;
}

//Hi·ªÉn th·ªã ngay khi load
renderCountdown();


// Hi·ªÉn th·ªã ƒë·∫øm ng∆∞·ª£c
function startCountdown() {
    const timer = setInterval(() => {
        const countdownEl = document.getElementById("autoCountdown");
        // N·∫øu ƒëang trong th·ªùi gian ch·ªù sau khi quay
        if (pauseAfterSpin) {
            if (pauseTimer > 0) {
                countdownEl.innerHTML = `<span>${pauseTimer}</span>`;
                countdownEl.classList.add("blink-yellow"); // v√†ng nh·∫•p nh√°y
                pauseTimer--;
            }
            else {
                countdownValue = 35; // reset v·ªÅ 35 gi√¢y
                pauseAfterSpin = false;
                countdownEl.classList.remove("blink-yellow");
                renderCountdown(); // hi·ªÉn th·ªã l·∫°i
                countdownEl.innerHTML = `<span id="countdownValue">${countdownValue}</span>`;
            }
            return;
        }
        countdownValue--;
        countdownEl.textContent = `${countdownValue}`;
        if (countdownValue === 20) {
            suggestResult();
        }
        if (countdownValue <= 5) {
            countdownEl.classList.add("blink"); // ƒë·ªè nh·∫•p nh√°y
        }
        else {
            countdownEl.classList.remove("blink");
        }
        countdownEl.innerHTML = `<span id="countdownValue">${countdownValue}</span>`;

        if (countdownValue <= 0) {
            if (!isSpinning) {
                spinWheel();
                startDoorAnimation();
            }
            // Sau khi quay th√¨ pause 4 gi√¢y
            pauseAfterSpin = true;
            pauseTimer = 4;
            countdownEl.classList.remove("blink"); // t·∫Øt ƒë·ªè nh·∫•p nh√°y

            lastSpinTime = Date.now();
            localStorage.setItem("lastSpinTime", lastSpinTime);
            countdownValue = countdownDuration;
        }
        renderCountdown(); // c·∫≠p nh·∫≠t m·ªói gi√¢y
        countdownEl.innerHTML = `<span id="countdownValue">${countdownValue}</span>`;
    }, 1000);
}
startCountdown();

function suggestResult() {
    const totalWeight = options.reduce((sum, opt) => sum + opt.weight, 0);
    let rand = Math.random() * totalWeight;
    let cumWeight = 0;
    for (let opt of options) {
        cumWeight += opt.weight;
        if (rand <= cumWeight) {
            const hotText = `üî• Hot: ${opt.name} ${opt.icon}`;
            document.getElementById("suggestion").textContent = hotText;
            localStorage.setItem("lastHot", hotText); // üî• L∆∞u v√†o localStorage
            return;
        }
    }
}

//Khi load l·∫°i trang, hi·ªÉn th·ªã l·∫°i Hot n·∫øu c√≥
const savedHot = localStorage.getItem("lastHot");
if (savedHot) {
    document.getElementById("suggestion").textContent = savedHot;
}

function updateBalance() {
    document.getElementById("balance").textContent = balance;
}

// Hi·ªÉn th·ªã giao di·ªán r√∫t xu
document.getElementById("withdrawBtn").onclick = () => {
    document.getElementById("withdrawPanel").style.display = "block";
};




// X·ª≠ l√Ω r√∫t xu
document.getElementById("confirmWithdraw").onclick = () => {
    const name = document.getElementById("userName").value;
    const account = document.getElementById("userAccount").value;
    const amount = parseInt(document.getElementById("withdrawAmount").value);
    const status = document.getElementById("withdrawStatus");
    const modal = document.getElementById("withdrawConfirmModal");
    const confirmText = document.getElementById("withdrawConfirmText");

    if (!name || !account || !amount || amount <= 0) {
        status.textContent = "‚ö†Ô∏è Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin h·ª£p l·ªá.";
        status.style.color = "red";
        return;
    }

    if (amount > balance) {
        status.textContent = "‚ö†Ô∏è S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ r√∫t.";
        status.style.color = "red";
        return;
    }

    // Hi·ªÉn th·ªã modal x√°c nh·∫≠n
    confirmText.textContent = `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën r√∫t ${amount} xu kh√¥ng?`;
    modal.style.display = "flex";

    // N·∫øu b·∫•m H·ªßy
    document.getElementById("confirmNo").onclick = () => {
        modal.style.display = "none";
        status.textContent = "‚ùå Y√™u c·∫ßu r√∫t ƒë√£ b·ªã h·ªßy.";
        status.style.color = "red";
    };

    // N·∫øu b·∫•m X√°c nh·∫≠n
    document.getElementById("confirmYes").onclick = () => {
        modal.style.display = "none";

        // Tr·ª´ xu sau khi x√°c nh·∫≠n
        balance -= amount;
        updateBalance();

        // Hi·ªán th√¥ng b√°o ch·ªù x·ª≠ l√Ω
        let timeLeft = 35;
        status.style.color = "orange";
        status.textContent = `‚è≥ G·ª≠i y√™u c·∫ßu th√†nh c√¥ng, h·ªá th·ªëng ƒëang x·ª≠ l√Ω...`;

        const countdown = setInterval(() => {
            timeLeft--;
            status.textContent = `‚è≥ G·ª≠i y√™u c·∫ßu th√†nh c√¥ng, h·ªá th·ªëng ƒëang x·ª≠ l√Ω...`;
            if (timeLeft <= 0) {
                clearInterval(countdown);



                status.textContent = `Y√™u c·∫ßu r√∫t xu ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát!`;
                status.style.color = "lightgreen";
                document.getElementById("notification").textContent = `R√∫t xu th√†nh c√¥ng, ti·ªÅn ƒëang ƒë∆∞·ª£c chuy·ªÉn t·ªõi t√†i kho·∫£n, vui l√≤ng ƒë·ª£i!`;
                // ·∫®n giao di·ªán sau 5s
                setTimeout(() => {
                    document.getElementById("withdrawPanel").style.display = "none";
                    status.textContent = "";
                }, 5000);
            }
        }, 1000);
    };
};

function showBankInfo() {
    const amount = parseInt(document.getElementById("amount").value) || 0;
    if (amount > 0) {
        document.getElementById("bankInfo").style.display = "block";
        document.getElementById("depositStatus").textContent = 'B·∫•m g·ª≠i y√™u c·∫ßu n·∫°p sau khi chuy·ªÉn kho·∫£n.';
    } else {
        alert("Vui l√≤ng nh·∫≠p s·ªë xu mu·ªën n·∫°p!");
    }
}

function sendDepositRequest() {
    const amount = parseInt(document.getElementById("amount").value) || 0;
    if (amount > 0) {
        if (confirm(` X√°c nh·∫≠n chuy·ªÉn kho·∫£n th√†nh c√¥ng !`)) {
            // Hi·ªán th√¥ng tin ng√¢n h√†ng
            document.getElementById("bankInfo").style.display = "block";
            // Tr·∫°ng th√°i ch·ªù
            const status = document.getElementById("depositStatus");
            let timeLeft = 35;
            status.style.color = "orange";
            status.textContent = `‚è≥ G·ª≠i y√™u c·∫ßu th√†nh c√¥ng, h·ªá th·ªëng ƒëang x·ª≠ l√Ω...`;
            // ƒê·∫øm ng∆∞·ª£c 30s r·ªìi c·ªông xu
            const countdown = setInterval(() => {
                timeLeft--;
                if (timeLeft <= 0) {
                    clearInterval(countdown);
                    deposit(amount);
                    status.textContent = `‚úÖ N·∫°p th√†nh c√¥ng ${amount} xu v√†o t√†i kho·∫£n!`;
                    status.style.color = "lightgreen";
                    document.getElementById("notification").textContent = `N·∫°p th√†nh c√¥ng +${amount} xu.`;

                    // Sau 5 gi√¢y ·∫©n giao di·ªán ng√¢n h√†ng
                    setTimeout(() => {
                        document.getElementById("bankInfo").style.display = "none";
                    }, 5000);
                }
            }, 1000);
        }
    } else {
        alert("Vui l√≤ng nh·∫≠p s·ªë xu mu·ªën n·∫°p!");
    }
}


function updateBetDisplay() {
    document.querySelectorAll(".bet-box").forEach(box => {
        const name = box.dataset.name;
        box.querySelector(".bet-amount").textContent = bets[name];
    });
    const total = Object.values(bets).reduce((a, b) => a + b, 0);
    document.getElementById("totalBetDisplay").textContent = `T·ªïng c∆∞·ª£c: ${total}`;
}


function updateJackpotDisplay() {
    jackpotEl.textContent = jackpot.toFixed(0);
}

function updateBalanceDisplay() {
    balanceEl.textContent = balance;
    localStorage.setItem("balance", balance); // l∆∞u v√†o localStorage
}

function showNotification(message) {
    notificationEl.textContent = message;
    setTimeout(() => notificationEl.textContent = "", 3000);
}

function confirmDeposit() {
    const amount = parseInt(document.getElementById("amount").value) || 0;
    if (amount > 0 && confirm(`X√°c nh·∫≠n n·∫°p ${amount} xu?`)) {
        showBankInfo();

        // Hi·ªán th√¥ng tin ng√¢n h√†ng
        document.getElementById("bankInfo").style.display = "block";
    }
}

function confirmWithdraw() {
    const amount = parseInt(document.getElementById("amount").value);
    const balanceEl = document.getElementById("balance");
    if (isNaN(amount) || amount <= 0) {
        alert("Vui l√≤ng nh·∫≠p s·ªë xu h·ª£p l·ªá ƒë·ªÉ r√∫t.");
        return;
    }
    if (amount > balance) {
        alert("Kh√¥ng th·ªÉ r√∫t xu v√¨ s·ªë d∆∞ kh√¥ng ƒë·ªß.");
        return;
    }
    if (confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën r√∫t ${amount} xu kh√¥ng?`)) {
        balance -= amount;
        balanceEl.textContent = balance;
        document.getElementById("notification").textContent = `R√∫t xu th√†nh c√¥ng -${amount}`;
    }
}

function deposit(amount) {
    balance += amount;
    updateBalanceDisplay();
}

function withdraw(amount) {
    balance -= amount;
    updateBalanceDisplay();
    showNotification(`-${amount} xu ƒë√£ ƒë∆∞·ª£c r√∫t.`);
}

function confirmClearBetHistory() {
    if (confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a l·ªãch s·ª≠ ƒë·∫∑t c∆∞·ª£c?")) {
        clearBetHistory();
    }
}

function confirmClearResultHistory() {
    if (confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a l·ªãch s·ª≠ k·∫øt qu·∫£?")) {
        clearResultHistory();
    }
}

function clearBetHistory() {
    betHistoryEl.innerHTML = "üßæ <b>L·ªãch s·ª≠ ƒë·∫∑t c∆∞·ª£c:</b><br>";
}

function clearResultHistory() {
    historyEl.innerHTML = "üå° <b>L·ªãch s·ª≠ k·∫øt qu·∫£:</b><br>";
}

function renderWheel() {
    const angleStep = 360 / options.length;
    wheelEl.innerHTML = ""; // x√≥a c≈©
    options.forEach((opt, index) => {
        const segment = document.createElement("div");
        segment.className = "segment";
        segment.textContent = opt.icon;
        segment.style.transform = `rotate(${index * angleStep}deg) translate(0, -85%)`;
        wheelEl.appendChild(segment);
    });
}
renderWheel();

/// H√†m th√™m k·∫øt qu·∫£ v√†o l·ªãch s·ª≠ (gi·ªØ t·ªëi ƒëa 8)
function addResultToHistory(icon) {
    let Results = JSON.parse(localStorage.getItem("Results")) || [];

    // th√™m k·∫øt qu·∫£ m·ªõi v√†o ƒë·∫ßu m·∫£ng
    Results.unshift(icon);

    // gi·ªõi h·∫°n 8 k·∫øt qu·∫£
    if (Results.length > 8) {
        Results = Results.slice(0, 8);
    }

    // l∆∞u l·∫°i
    localStorage.setItem("Results", JSON.stringify(Results));

    // c·∫≠p nh·∫≠t hi·ªÉn th·ªã
    renderHistory();
}

// L∆∞u l·ªãch s·ª≠ v√†o localStorage
function saveHistory() {
    const data = historyEl.innerHTML.replace('üßæ <b>L·ªãch s·ª≠ k·∫øt qu·∫£:</b><br>', '');
    localStorage.setItem("historyData", data);
}

// Kh√¥i ph·ª•c l·ªãch s·ª≠ khi F5
function loadHistory() {
    const saved = localStorage.getItem("historyData");
    if (saved) {
        historyEl.innerHTML = 'üßæ <b>L·ªãch s·ª≠ k·∫øt qu·∫£:</b><br>' + saved;
    }
}

// G·ªçi khi trang load
window.addEventListener("load", loadHistory);

function addHistory(resultIcon) {
    saveHistory();
}

// H√†m hi·ªÉn th·ªã l·ªãch s·ª≠ ra giao di·ªán
function renderHistory() {
    const historyEl = document.getElementById("history");
    historyEl.innerHTML = "üßæ <b>L·ªãch s·ª≠ k·∫øt qu·∫£:</b><br>";
    let Results = JSON.parse(localStorage.getItem("Results")) || [];
    Results.forEach(icon => {
        const span = document.createElement("span");
        span.className = "result-item";
        span.textContent = icon + " ";
        historyEl.appendChild(span);
    });

}




// g·ªçi khi t·∫£i l·∫°i trang ƒë·ªÉ load l·ªãch s·ª≠ c≈©
window.onload = () => {
    renderHistory();
    updateBalanceDisplay(); // c≈©ng load l·∫°i s·ªë d∆∞ ƒë√£ l∆∞u
};

function spinWheel() {
    if (isSpinning) return;
    isSpinning = true;
    document.querySelectorAll('.chip, .bet-box').forEach(chip => chip.classList.add('lock-bets'));
    const resultEl = document.getElementById("result");
    let totalBet = Object.values(bets).reduce((a, b) => a + b, 0);
    for (let key in bets) {
        let val = parseFloat(bets[key]);
        if (isNaN(val) || val < 0) {
            resultEl.textContent = `‚ùå C∆∞·ª£c kh√¥ng h·ª£p l·ªá ·ªü c·ª≠a ${key}`;
            return;
        }
    }
    document.getElementById("spinSound").play();
    resultEl.classList.add("spin-animating");
    setTimeout(() => {
        resultEl.classList.remove("spin-animating");
        highlightWinner(selected.name);
    }, 3000);
    const spinDuration = 5; // gi√¢y
    let countdown = spinDuration;
    const selected = weightedRandom(options, bets);
    const anglePerSegment = 360 / options.length;
    const selectedIndex = options.findIndex(opt => opt.name === selected.name);
    const randomOffset = Math.random() * anglePerSegment; // gi√∫p k·∫øt qu·∫£ tr√¥ng t·ª± nhi√™n h∆°n
    const targetAngle = (360 - (selectedIndex * anglePerSegment + anglePerSegment / 2) % 360);
    const extraSpins = 5;
    const targetRotation = 360 * extraSpins + targetAngle;
    wheelRotation += targetRotation;
    wheelEl.style.transform = `rotate(${wheelRotation}deg)`;
    const animationInterval = setInterval(() => {
        const tempIcon = options[Math.floor(Math.random() * options.length)].icon;
        resultEl.textContent = `${tempIcon}`;

        highlightWinner(selected.name);

    }, 100);



    const countdownInterval = setInterval(() => {
        countdown--;
        if (countdown <= 0) {
            clearInterval(countdownInterval);
            clearInterval(animationInterval);
            const betAmount = bets[selected.name] || 0;
            const winAmount = betAmount > 0 ? betAmount * selected.reward : 0;
            balance += winAmount;
            updateBalanceDisplay();
            const lostAmount = totalBet - winAmount;
            let profitOrLoss = winAmount - totalBet;

            // T√≠ch l≈©y h≈© t·ª´ ph·∫ßn c∆∞·ª£c thua
            if (lostAmount > 0) {
                const jackpotContribution = Math.floor(lostAmount * 0.1); // 10% s·ªë xu thua
                jackpot += jackpotContribution;
                updateJackpotDisplay();
            }
            if (profitOrLoss > 0) {
                netProfit += profitOrLoss;
            }
            else if (profitOrLoss < 0) {
                netLoss += Math.abs(profitOrLoss);
            }
            updateStatsDisplay();
            addResultToHistory(selected.icon);
            let outcome = winAmount > 0 ? `‚úÖ Th·∫Øng ${winAmount}` : `‚ùå Thua`;
            let jackpotWin = 0;
            if (jackpot >= JACKPOT_THRESHOLD && Math.random() < JACKPOT_CHANCE) {
                jackpotWin = Math.floor(jackpot * 0.8);
                jackpot -= jackpotWin;
                balance += jackpotWin;
                updateBalanceDisplay();
                updateJackpotDisplay();
                outcome += ` üéâ N·ªï h≈©! Nh·∫≠n th√™m ${jackpotWin} xu t·ª´ h≈©!`;
                showJackpotEffect();  // Hi·ªÉn th·ªã hi·ªáu ·ª©ng ph√°o hoa + coin bay
            }
            if (totalBet > 0) {
                resultEl.textContent = `${selected.icon}`;
                // ‚úÖ L∆∞u icon k·∫øt qu·∫£ v√†o localStorage
                localStorage.setItem("lastResultIcon", result.icon);
                localStorage.setItem("lastResult", JSON.stringify(selected));
            }
            else {
                resultEl.textContent = `${selected.icon}`;

                // ‚úÖ L∆∞u icon k·∫øt qu·∫£ v√†o localStorage
                localStorage.setItem("lastResultIcon", result.icon);
                localStorage.setItem("lastResult", JSON.stringify(selected));
            }
            addHistory(result.icon);

            // B·∫≠t s√°ng c·∫£ √¥ ƒë·∫∑t c∆∞·ª£c tr√∫ng
            const betBox = document.querySelector(`.bet-box[data-name="${selected.name}"]`);
            if (betBox) {
                betBox.classList.add('highlight-win');
                setTimeout(() => {
                    betBox.classList.remove('highlight-win');
                    document.querySelectorAll('.chip, .bet-box').forEach(chip => chip.classList.remove('lock-bets'));
                    //TƒÉng s·ªë phi√™n quay.
                    spinCount++;
                    document.getElementById("spinCounter").textContent = `üéØ Phi√™n quay: ${spinCount}`;
                    updateSpinCounter();
                    //Reset c∆∞·ª£c.
                    resetBets();

                    highlightWinner(selected.name);
                    isSpinning = false;
                    clearBets(); // üî• sang v√≤ng m·ªõi th√¨ kh√¥ng gi·ªØ c∆∞·ª£c n·ªØa
                }, 5000);
            }
            if (winAmount >= 1000) {
                resultEl.classList.add("big-win-effect");
            }
            else if (winAmount > 0) {
                resultEl.classList.add("small-win-effect");
            }
            setTimeout(() => {
                resultEl.classList.remove("big-win-effect", "small-win-effect");
            }, 2000);

            //Hi·ªán th·ªã l·ªãch s·ª≠ c∆∞·ª£c.
            if (totalBet > 0) {
                let betLog = `${new Date().toLocaleTimeString()} - C∆∞·ª£c: `;
                for (let key in bets) {
                    const val = parseFloat(bets[key]) || 0;
                    if (val > 0) betLog += `${key}: ${val} xu, `;
                }
                betLog += `‚Üí K·∫øt qu·∫£: ${selected.icon} - ${outcome}`;
                betHistoryEl.innerHTML += `üßæ ${betLog}<br>`;
            }
        }
    }, 1000);
}

// H√†m c·∫≠p nh·∫≠t giao di·ªán + l∆∞u
function updateSpinCounter() {
    const spinNumber = getCurrentSpinNumber();
    spinCounterEl.textContent = `üéØ Phi√™n quay: ${spinNumber}`;
    /*document.getElementById("spinCounter").textContent = `üéØ Phi√™n quay: ${spinCount}`;
    localStorage.setItem("spinCount", spinCount);
    localStorage.setItem("lastSpinDate", getToday());*/
}

// Khi load trang th√¨ hi·ªÉn th·ªã s·ªë phi√™n ƒë√£ l∆∞u
updateSpinCounter();
setInterval(updateSpinCounter, 1000);

function weightedRandom(items, bets) {
    const adjustedItems = items.map(item => {
        const betAmount = parseFloat(bets[item.name]) || 0;
        let penaltyFactor = 1;
        if (betAmount > 0) {
            penaltyFactor = Math.max(0.2, 1 / (1 + betAmount / 10000000));
        }
        return { ...item, weight: item.weight * penaltyFactor };
    });
    const totalWeight = adjustedItems.reduce((sum, item) => sum + item.weight, 0);
    let rand = Math.random() * totalWeight;
    let cumWeight = 0;
    for (let item of adjustedItems) {
        cumWeight += item.weight;
        if (rand <= cumWeight) {
            return item;
        }
    }
}

function confirmSpin() {
    const form = document.getElementById("betForm");
    const formData = new FormData(form);
    let totalBet = 0;
    for (const [key, value] of formData.entries()) {
        totalBet += parseInt(value || 0);
    }
    if (totalBet <= 0) {
        alert("Vui l√≤ng ƒë·∫∑t c∆∞·ª£c tr∆∞·ªõc khi quay.");
        return;
    }
    if (confirm(`T·ªïng s·ªë xu ƒë√£ ƒë·∫∑t c∆∞·ª£c: ${totalBet}.\nB·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën quay th∆∞·ªüng?`)) {
        spinWheel();
    }
}

/*//auto quay
  let autoTime = 35;
  let autoInterval;
  let pauseAfterSpin = false;
  let pauseTimer = 0;

  function startAutoSpinTimer() {
  autoInterval = setInterval(() => {
  const countdownEl = document.getElementById("autoCountdown");
// N·∫øu ƒëang trong th·ªùi gian ch·ªù sau khi quay
  if (pauseAfterSpin) {
  if (pauseTimer > 0) {
  countdownEl.textContent = `‚è≥ ƒêang ch·ªù k·∫øt qu·∫£... ${pauseTimer}s`;
  countdownEl.classList.add("blink-yellow"); // v√†ng nh·∫•p nh√°y
  pauseTimer--;
  } 
  else {
  autoTime = 35; // reset v·ªÅ 35 gi√¢y
  pauseAfterSpin = false;
  countdownEl.classList.remove("blink-yellow");
  countdownEl.textContent = `‚è≥ Quay th∆∞·ªüng sau: ${autoTime} gi√¢y`;
  }
  return;
  }
// B√¨nh th∆∞·ªùng ƒë·∫øm ng∆∞·ª£c 35s
  autoTime--;
  countdownEl.textContent = `‚è≥ Quay th∆∞·ªüng sau: ${autoTime} gi√¢y`;
  if (autoTime === 20) {
    suggestResult();
  }
  if (autoTime <= 5) {
  countdownEl.classList.add("blink"); // ƒë·ªè nh·∫•p nh√°y
  } 
  else {
  countdownEl.classList.remove("blink");
  }
  if (autoTime <= 0) {
  if (!isSpinning) {
  spinWheel();
  }

// Sau khi quay th√¨ pause 4 gi√¢y
  pauseAfterSpin = true;
  pauseTimer = 4;
  countdownEl.classList.remove("blink"); // t·∫Øt ƒë·ªè nh·∫•p nh√°y
  }
  }, 1000);
}*/

window.onload = function () {
    updateBalanceDisplay();
    updateJackpotDisplay();
    startAutoSpinTimer();
};

function showJackpotEffect() {
    const container = document.getElementById("jackpotEffect");
    container.innerHTML = "";
    // Coin bay xi√™n
    for (let i = 0; i < 20; i++) {
        const coin = document.createElement("div");
        coin.className = "coin";
        const x = `${(Math.random() - 0.5) * 300}px`;
        const y = `${-150 - Math.random() * 200}px`;
        coin.style.left = `${50 + Math.random() * 30 - 15}%`;
        coin.style.bottom = `0`;
        coin.style.setProperty('--x', x);
        coin.style.setProperty('--y', y);
        container.appendChild(coin);
    }
    // Fireworks nhi·ªÅu m√†u
    const colors = ['#ff0', '#f0f', '#0ff', '#f55', '#5f5', '#55f', '#ffa500'];
    for (let i = 0; i < 10; i++) {
        const fw = document.createElement("div");
        fw.className = "firework";
        fw.style.left = `${40 + Math.random() * 20}%`;
        fw.style.top = `${30 + Math.random() * 30}%`;
        fw.style.setProperty('--color', colors[Math.floor(Math.random() * colors.length)]);
        container.appendChild(fw);
    }
    // M∆∞a xu
    for (let i = 0; i < 30; i++) {
        const rain = document.createElement("div");
        rain.className = "rain-coin";
        rain.style.left = `${Math.random() * 100}%`;
        rain.style.animationDuration = `${2 + Math.random() * 2}s`;
        rain.style.animationDelay = `${Math.random() * 0.5}s`;
        container.appendChild(rain);
    }
    // Xo√° hi·ªáu ·ª©ng sau 3 gi√¢y
    setTimeout(() => container.innerHTML = "", 3000);
}

function updateTimeDisplay() {
    const now = new Date();
    const timeString = now.toLocaleTimeString('vi-VN', { hour12: false });
    document.getElementById("currentTime").textContent = timeString;
}
setInterval(updateTimeDisplay, 1000);
updateTimeDisplay(); // ch·∫°y ngay khi load

function updateStatsDisplay() {
    document.getElementById("stats").textContent =
        `üìä L√£i: ${netProfit} xu | L·ªó: ${netLoss} xu`;
    localStorage.setItem("netProfit", netProfit);
    localStorage.setItem("netLoss", netLoss);
}
updateStatsDisplay(); // g·ªçi 1 l·∫ßn khi load trang

function resetStats() {
    if (confirm("Reset th·ªëng k√™ l√£i/l·ªó?")) {
        netProfit = 0;
        netLoss = 0;
        updateStatsDisplay();
    }
}

function updateJackpotDisplay() {
    jackpotEl.textContent = jackpot.toFixed(0);
    localStorage.setItem("jackpot", jackpot); // üî• l∆∞u l·∫°i jackpot
    document.getElementById("jackpotProgress").value = jackpot;
}

// üîπ Hi·ªÉn th·ªã ngay khi load trang
updateJackpotDisplay();

if (jackpot >= JACKPOT_THRESHOLD) {
    document.querySelector('button[onclick="confirmSpin()"]').classList.add('glow');
}


// --- CHIP CH·ªåN TI·ªÄN C∆Ø·ª¢C ---

// Kh·ªüi t·∫°o c∆∞·ª£c = 0 cho t·∫•t c·∫£
document.querySelectorAll(".bet-box").forEach(box => {
    bets[box.dataset.name] = 0;
});


// --- ch·ªçn chip ---
document.querySelectorAll(".chip").forEach(chip => {
    chip.addEventListener("click", () => {
        document.querySelectorAll(".chip").forEach(c => c.classList.remove("active"));
        chip.classList.add("active");
        currentChip = parseInt(chip.dataset.value);
    });
});

// --- ƒë·∫∑t c∆∞·ª£c b·∫±ng click √¥ ---
document.querySelectorAll(".bet-box").forEach(box => {
    box.addEventListener("click", () => {
        if (!currentChip) {
            alert("H√£y ch·ªçn m·ªánh gi√° chip tr∆∞·ªõc!");
            return;
        }
        if (balance < currentChip) {
            alert("Kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c!");
            return;
        }
        if (currentChip > 0) {
            const name = box.dataset.name;
            bets[name] = Number(bets[name] || 0) + Number(currentChip);
            balance -= currentChip;
            updateBalanceDisplay();
            updateBetDisplay();
            saveBets();  // üî• l∆∞u l·∫°i ngay
        }
    });
});

// --- reset c∆∞·ª£c ---
function resetBets() {
    for (let k in bets) bets[k] = 0;
    updateBetDisplay();
}

// L·∫•y ng√†y hi·ªán t·∫°i (yyyy-mm-dd)
function getToday() {
    let d = new Date();
    return d.getFullYear() + "-" + (d.getMonth() + 1) + "-" + d.getDate();
}

// L·∫•y ng√†y cu·ªëi c√πng l∆∞u trong localStorage
let lastDate = localStorage.getItem("lastSpinDate");

// N·∫øu kh√°c ng√†y ‚Üí reset v·ªÅ 0
if (lastDate !== getToday()) {
    spinCount = 0;
    localStorage.setItem("spinCount", spinCount);
    localStorage.setItem("lastSpinDate", getToday());
}

// --- L∆∞u c∆∞·ª£c v√†o localStorage ---
function saveBets() {
    localStorage.setItem("currentBets", JSON.stringify(bets));
    localStorage.setItem("totalBet", document.getElementById("totalBetDisplay").textContent);
}

// --- Kh√¥i ph·ª•c c∆∞·ª£c khi load l·∫°i ---
function restoreBets() {
    const savedBets = JSON.parse(localStorage.getItem("currentBets")) || {};
    bets = savedBets;
    Object.keys(bets).forEach(name => {
        bets[name] = Number(bets[name]); // √©p v·ªÅ s·ªë
        const bet = document.querySelector(`.bet-box[data-name="${name}"] .bet-amount`);
        if (bet) bet.textContent = bets[name];
    });

    // T·ªïng c∆∞·ª£c
    const savedTotal = localStorage.getItem("totalBet");
    if (savedTotal) {
        document.getElementById("totalBetDisplay").textContent = savedTotal;
    }
}

// --- Reset c∆∞·ª£c sau khi quay ---
function clearBets() {
    bets = {};
    document.querySelectorAll(".bet-amount").forEach(el => el.textContent = "0");
    document.getElementById("totalBetDisplay").textContent = "T·ªïng c∆∞·ª£c: 0";
    localStorage.removeItem("currentBets");
    localStorage.removeItem("totalBet");
}

// G·ªçi restore khi trang v·ª´a load
window.addEventListener("load", restoreBets);
window.addEventListener("load", () => {
    let savedResult = localStorage.getItem("lastResult");
    if (savedResult) {
        let selected = JSON.parse(savedResult);
        document.getElementById("result").innerHTML =
            `${selected.icon}`;
    }
});

function startDoorAnimation(callback) {
    const doors = document.querySelectorAll(".door");
    if (!doors.length) return;
    // L√†m t·ªëi t·∫•t c·∫£
    doors.forEach(d => d.classList.add("dim"));
    let index = 0;
    const interval = setInterval(() => {
        // T·∫Øt s√°ng
        doors.forEach(d => d.classList.remove("highlight"));
        // S√°ng c·ª≠a hi·ªán t·∫°i
        doors[index].classList.add("highlight");
        index = (index + 1) % doors.length;
    }, 100); // ƒë·ªïi c·ª≠a m·ªói 0.1s
    // Sau 5 gi√¢y th√¨ d·ª´ng
    setTimeout(() => {
        clearInterval(interval);
        doors.forEach(d => d.classList.remove("highlight", "dim"));
        if (callback) callback();
    }, 5000);
}

function highlightWinner(name) {
    const doors = document.querySelectorAll(".door");
    doors.forEach(d => d.classList.remove("winner")); // b·ªè highlight c≈©
    doors.forEach(door => {
        const img = door.querySelector("img");
        if (img && img.alt === name) {   // so s√°nh theo alt
            door.classList.add("winner");
        }
    });
}