<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>üé∞ Lucky Spin</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
 
</head>

 <style>
    * {
      box-sizing: border-box;
      font-family: 'Poppins', sans-serif;
    }


   body {
  margin: 0;
  padding: 20px;
  font-family: 'Poppins', sans-serif;
  background: linear-gradient(135deg, #1a1a1a, #2c2c2c);
  background-size: 400% 400%;
  color: #fff;
  text-align: center;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: center;
  padding-bottom: 50px;
  animation: softGradient 20s ease infinite;
}



   h1 {
  margin: 30px 0 10px;
  font-size: 3rem;
  color: #ffd700;
  text-shadow: 0 0 10px #ffcc00, 0 0 20px #ff9900, 0 0 30px #cc6600;
  font-weight: 900;
  letter-spacing: 2px;
}



    .wallet, .result, .history, .notification, .bet-section {
  background: linear-gradient(145deg, #222, #111);
  border-radius: 15px;
  padding: 20px;
  margin: 20px 0;
  box-shadow: 0 0 20px rgba(255, 215, 0, 0.2);
  width: 90%;
  max-width: 700px;
  border: 1px solid #ffd700;
}


    .wallet {
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    .wallet input {
      padding: 10px;
      font-size: 1em;
      width: 150px;
      margin: 5px;
      border-radius: 8px;
      border: none;
    }

    button {
  padding: 12px 20px;
  margin: 5px;
  font-size: 1em;
  font-weight: bold;
  border: 2px solid #ffd700;
  border-radius: 12px;
  background: linear-gradient(145deg, #ffcc00, #cc9900);
  color: #000;
  cursor: pointer;
  box-shadow: 0 0 10px #ffd700, inset 0 0 5px #fff;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

button:hover {
  transform: scale(1.05);
  box-shadow: 0 0 15px #fff000, inset 0 0 5px #fff;
}


    .notification {
      margin-top: 10px;
      color: #00ff95;
      font-weight: 600;
    }

    .bet-section {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  gap: 15px;
}

  .bet-box {
  flex: 1 0 calc(25% - 15px);
  max-width: calc(25% - 15px);
  background: linear-gradient(145deg, #ffd700, #ffcc00); /* v√†ng kim */
  border: 2px solid #fff8dc;
  border-radius: 12px;
  padding: 12px;
  box-shadow: 0 0 15px rgba(255, 215, 0, 0.6), inset 0 0 5px rgba(255, 255, 255, 0.4);
  transition: all 0.3s ease;
  color: #000; /* ƒë·ªÉ ch·ªØ v√† input r√µ h∆°n tr√™n n·ªÅn v√†ng */
}

.bet-box, .door {
  position: relative;
}


/* Nh√£n HOT chung */
.bet-box .hot-label,
.door .hot-label {
  position: absolute;
  top: -15px;               /* d√°n ngay tr√™n vi·ªÅn tr√™n */
  left: 80%;
  transform: translateX(-50%);
  padding: 2px 4px;
  font-size: 12px;
  font-weight: bold;
  color: #fff;
  background: red;
  border: 2px solid gold;  /* gi·ªëng khung v√†ng */
  border-radius: 6px;
  text-shadow: 0 0 5px yellow, 0 0 10px orange;
  animation: pulseHot 1s infinite;
  pointer-events: none;    /* tr√°nh che thao t√°c */
  z-index: 5;
}

@keyframes pulseHot {
  0%   { transform: scale(1); opacity: 1; }
  50%  { transform: scale(1.1); opacity: 0.6; }
  100% { transform: scale(1); opacity: 1; }
}


.bet-box .icon {
  font-size: 2.5rem;  /* icon to h∆°n */
  display: block;
  margin-bottom: 5px;
}

.bet-box:hover {
  transform: scale(1.02);
  box-shadow: 0 0 20px rgba(255, 223, 0, 0.9), inset 0 0 8px rgba(255, 255, 255, 0.6);
}

@media (max-width: 768px) 
{
  .bet-box {
    flex: 1 0 calc(50% - 15px);
    max-width: calc(50% - 15px);
  }
}
    .bet-box label {
      display: flex;
      flex-direction: column;
      font-weight: 600;
    }

    .bet-box input {
      margin-top: 5px;
      padding: 5px;
      font-size: 1em;
      border-radius: 8px;
      border: none;
      text-align: center;
    }

    .result {
      font-size: 1.3em;
      font-weight: 600;
      border: 2px solid #f0c330;
    }

    .history {
      text-align: left;
      font-size: 0.95em;
      background: #1d1d2c;
      overflow-y: auto;
      max-height: 200px;
    }

.time-display {
  margin-top: 10px;
  font-size: 1.3rem;
  font-weight: bold;
  color: #ffcc00;
  text-shadow: 0 0 5px #fff000;
}


@keyframes smallWinFlash {
  0%, 100% { background-color: transparent; }
  50% { background-color: rgba(0, 255, 100, 0.3); }
}

@keyframes bigWinFlash {
  0%, 100% { background-color: transparent; transform: scale(1); }
  50% {
    background-color: rgba(255, 255, 0, 0.4);
    transform: scale(1.2);
  }
}

.small-win-effect {
  animation: smallWinFlash 1s ease-in-out 2;
  border: 2px solid #00ff95 !important;
}

.big-win-effect {
  animation: bigWinFlash 0.8s ease-in-out 3;
  border: 3px solid #ffd700 !important;
}



#jackpotEffect {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 9999;
  overflow: hidden;
}

/* Coin bay */
.coin {
  position: absolute;
  width: 30px;
  height: 30px;
  background-image: url('https://cdn-icons-png.flaticon.com/512/138/138292.png');
  background-size: contain;
  background-repeat: no-repeat;
  animation: flyCoin 1.5s ease-out forwards;
}

@keyframes flyCoin {
  0% {
    transform: translate(0, 0) scale(1) rotate(0deg);
    opacity: 1;
  }
  100% {
    transform: translate(var(--x), var(--y)) scale(1.3) rotate(720deg);
    opacity: 0;
  }
}

/* Firework burst nhi·ªÅu m√†u */
.firework {
  position: absolute;
  width: 10px;
  height: 10px;
  background-color: var(--color);
  border-radius: 50%;
  animation: firework 1s ease-out forwards;
}

@keyframes firework {
  0% {
    transform: scale(1);
    opacity: 1;
  }
  100% {
    transform: scale(6);
    opacity: 0;
  }
}

/* M∆∞a xu */
.rain-coin {
  position: absolute;
  top: -50px;
  width: 24px;
  height: 24px;
  background-image: url('https://cdn-icons-png.flaticon.com/512/138/138292.png');
  background-size: contain;
  background-repeat: no-repeat;
  animation: coinRain linear forwards;
}

@keyframes coinRain {
  to {
    transform: translateY(120vh) rotate(720deg);
    opacity: 0;
  }
}


@keyframes softGradient {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}


@keyframes spinShake {
  0% { transform: rotate(0deg); }
  25% { transform: rotate(3deg); }
  50% { transform: rotate(-3deg); }
  75% { transform: rotate(3deg); }
  100% { transform: rotate(0deg); }
}
.spin-animating {
  animation: spinShake 0.2s ease-in-out infinite;
}


#jackpotProgress {
  height: 15px;
  border-radius: 10px;
  border: 1px solid #ffd700;
  background-color: #333;
}

#jackpotProgress::-webkit-progress-value {
  background-color: gold;
  border-radius: 10px;
}


@keyframes luxuryFlash {
  0% {
    box-shadow: 0 0 0px gold, inset 0 0 0px #fff;
    background: rgba(255, 215, 0, 0.05);
    transform: scale(1);
  }
  50% {
    box-shadow: 0 0 15px 5px gold, inset 0 0 10px #fff8dc;
    background: rgba(255, 215, 0, 0.1);
    transform: scale(1.03);
  }
  100% {
    box-shadow: 0 0 0px gold, inset 0 0 0px #fff;
    background: rgba(255, 215, 0, 0.05);
    transform: scale(1);
  }
}

.bet-box.highlight-win {
  animation: luxuryFlash 1s ease-in-out 3;
  border: 2px solid gold;
  border-radius: 12px;
  transition: all 0.3s ease;
  position: relative;
  z-index: 2;
}




.glow {
  box-shadow: 0 0 20px 5px #ffd700, inset 0 0 10px #fff;
  animation: pulseGlow 1s infinite alternate;
}

@keyframes pulseGlow {
  0% { box-shadow: 0 0 10px #ffd700; }
  100% { box-shadow: 0 0 25px #fff000; }
}


#wheel-container {
  display: none;
  position: relative;
  width: 300px;
  height: 300px;
  margin: 30px auto;
}

#wheel {
  display: none;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  border: 5px solid gold;
  position: relative;
  transition: transform 4s cubic-bezier(0.33, 1, 0.68, 1);
  background: repeating-conic-gradient(#f8c200 0deg 45deg, #ffe680 45deg 90deg);
  overflow: hidden;
}

#wheel .segment {
  position: absolute;
  width: 50%;
  height: 50%;
  top: 50%;
  left: 50%;
  transform-origin: 0% 0%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.6em;
  font-weight: bold;
  color: #000;
  padding-left: 75px; /* gi√∫p icon kh√¥ng b·ªã ra s√°t vi·ªÅn */
 
}


#pointer {
  position: absolute;
  top: -20px;
  left: 50%;
  transform: translateX(-50%);
  font-size: 2rem;
}

.game-container {
  border: 4px solid gold;
  border-radius: 20px;
  padding: 20px;
  margin: 40px auto;
  max-width: 1200px;
  background: #000;  /* N·ªÄN ƒêEN */
  box-shadow: 0 0 25px 5px gold, inset 0 0 15px #fff5cc;
  display: flex;
  flex-direction: row; /* <-- CHIA NGANG */
  gap: 25px;
  justify-content: space-between;
  align-items: flex-start;
  border-radius: 20px;    /* bo g√≥c ƒë·∫πp h∆°n */
}

/* B√™n tr√°i (v√≤ng quay + k·∫øt qu·∫£) */
.left-panel {
  flex: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 15px;
}

/* B√™n ph·∫£i (c∆∞·ª£c + v√≠ + l·ªãch s·ª≠) */
.right-panel {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 15px;
}


/* Cho m√†n h√¨nh nh·ªè th√¨ t·ª± ƒë·ªông xu·ªëng h√†ng */
@media (max-width: 900px) {
  .game-container {
    flex-direction: column;
    align-items: center;
  }
}


@keyframes blink {
  0% { opacity: 1; }
  50% { opacity: 0; }
  100% { opacity: 1; }
}

.blink {
  color: red !important;
  animation: blink 1s infinite;
}


@keyframes blinkYellow {
  0% { color: gold; opacity: 1; }
  50% { color: orange; opacity: 0.3; }
  100% { color: gold; opacity: 1; }
}

.blink-yellow {
  animation: blinkYellow 1s infinite;
  font-weight: bold;
}

#spinCounter {
  margin: 10px 0;
  font-weight: bold;
  color: #ffcc00;
}

.chip-selector {
  display: flex !important;        /* √©p bu·ªôc d√πng flex */
  flex-direction: row !important;  /* x·∫øp h√†ng ngang */
  justify-content: center;         /* cƒÉn gi·ªØa ngang */
  align-items: center;             /* cƒÉn gi·ªØa d·ªçc */
  gap: 15px;                       /* kho·∫£ng c√°ch gi·ªØa chip */
  margin: 20px 0;
}

.chip {
  flex: 0 0 auto; /* ƒë·∫£m b·∫£o kh√¥ng b·ªã co d·ªçc */
  width: 70px;
  height: 70px;
  border-radius: 50%;
  background: radial-gradient(circle at 30% 30%, gold, orange);
  color: #222;
  font-weight: bold;
  font-size: 16px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  box-shadow: 0 4px 8px rgba(0,0,0,0.3);
  transition: transform 0.2s, border 0.2s;
}

.chip:hover {
  transform: scale(1.15);
}

.chip.active {
  border: 4px solid red;
  transform: scale(1.2);
}


#betForm {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  margin-top: 15px;
}
.bet-cell {
  flex: 1 1 22%;
  padding: 10px;
  background: #f9f9f9;
  border: 2px solid #ccc;
  border-radius: 10px;
  text-align: center;
  cursor: pointer;
  font-weight: bold;
  transition: all 0.2s;
}
.bet-cell:hover {
  background: #e8ffe8;
  border-color: #6c3;
}
.bet-amount {
  display: block;
  font-size: 14px;
  margin-top: 5px;
  color: #333;
}


.lock-bets {
  pointer-events: none;
  opacity: 0.5;
}

#bankInfo {
  background: linear-gradient(145deg, #111, #222);
  border: 2px solid gold;
  border-radius: 12px;
  padding: 15px;
  color: #fff;
  font-size: 1.1em;
  box-shadow: 0 0 15px rgba(255,215,0,0.3);
  animation: fadeIn 0.5s ease;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(-10px); }
  to   { opacity: 1; transform: translateY(0); }
}

#withdrawPanel {
  background: linear-gradient(145deg, #111, #222);
  border: 2px solid gold;
  border-radius: 12px;
  padding: 15px;
  color: #fff;
  font-size: 1.1em;
  box-shadow: 0 0 15px rgba(255,215,0,0.3);
  animation: fadeIn 0.5s ease;
}

/* Icon trong l·ªãch s·ª≠ k·∫øt qu·∫£ */
.history .result-item {
  font-size: 1.8rem;   /* tƒÉng k√≠ch th∆∞·ªõc icon */
  margin: 3px;       /* t·∫°o kho·∫£ng c√°ch gi·ªØa c√°c icon */
  display: inline-block;
}

/* Icon trong √¥ hi·ªÉn th·ªã k·∫øt qu·∫£ ch√≠nh */
.result-display {
  font-size: 4rem;   /* tƒÉng k√≠ch th∆∞·ªõc icon k·∫øt qu·∫£ */
  text-align: center;
  display: flex;
  align-items: center;
  justify-content: center;
}

/*Tr·ª•c 8 c·ª≠a*/
.stage {
 position: relative;
 width: 450px;
 height: 450px;
 }

.hub {
  position: absolute;
  left: 51%;
  top: 50%;
  width: 100px;
  height: 100px;
  border-radius: 50%;
  transform: translate(-50%, -50%);
  display: flex;
  justify-content: center;
  align-items: center;
  font-weight: bold;
  font-size: 22px;
  color: #333;
  z-index: 3;

  /* n·ªÅn kim lo·∫°i s√°ng */
  background: radial-gradient(circle at 30% 30%, #ffffff, #d1d5db);

  /* vi·ªÅn v√†ng + √°nh s√°ng */
  border: 6px solid transparent;
  background-clip: padding-box;
  box-shadow:
    0 0 15px rgba(255, 215, 0, 0.7),
    inset 0 2px 6px rgba(0,0,0,0.25);
}

/* v√≤ng ngo√†i v√†ng */
.hub::before {
  content: "";
  position: absolute;
  inset: -6px;
  border-radius: 50%;
  background: linear-gradient(45deg, #fbbf24, #f59e0b, #fbbf24);
  z-index: -1;
  box-shadow: 0 0 15px rgba(251,191,36,0.8);
}

/* ch·ªØ n·ªïi 3D */
.hub span {
  color: #333;
  text-shadow:
    1px 1px 2px rgba(0,0,0,0.3),   /* b√≥ng nh·∫π */
    -1px -1px 2px rgba(255,255,255,0.8); /* vi·ªÅn s√°ng */
}

.doors, .spokes {
  position: absolute;
  left: 50%; top: 50%;
  width: 100%; height: 100%;
  transform: translate(-50%, -50%);
}
 
.door {
  position: absolute;
  left: 40%;
  top: 39%;
  width: 100px;
  height: 100px;
  background: #fff;
  border: 3px solid #2563eb;
  border-radius: 50%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  font-weight: bold;
  text-align: center;
  transform-origin: center center;
  box-shadow: 0 3px 8px rgba(0,0,0,0.15);
  z-index: 2;
}

.door .hot-label {
  position: absolute;
  top: -10px;             /* ƒë·∫∑t s√°t ngay tr√™n vi·ªÅn */
  left: 50%;
  transform: translateX(-50%);
  padding: 2px 4px;
  font-size: 10px;
  font-weight: bold;
  color: #fff;
  background: red;
  border: 1px solid gold;  /* t·∫°o khung v√†ng nh∆∞ vi·ªÅn √¥ */
  border-radius: 20px;
  text-shadow: 0 0 3px yellow, 0 0 10px orange;
  animation: pulseHot 1s infinite;
  pointer-events: none;   /* kh√¥ng che click v√†o √¥ */
  z-index: 0;             /* n·ªïi tr√™n vi·ªÅn */
}


.door::before {
  content: "";
  position: absolute;
  inset: 0;
  border-radius: 70%;
  padding: 4px;
  background: linear-gradient(135deg, #fcd34d, #f59e0b, #fcd34d);
  -webkit-mask: 
  linear-gradient(#fff 0 0) content-box, 
  linear-gradient(#fff 0 0);
  -webkit-mask-composite: xor;
  mask-composite: exclude;
}

.door img {
  width: 45px;
  height: 45px;
  margin-bottom: 3px;
}

.door span {
  font-size: 10px;
  border-radius: 10px;
  padding: 2px 5px;
}


.door:hover {
  transform: scale(1.1);
  box-shadow: 0 8px 18px rgba(0,0,0,0.35), inset 0 3px 6px rgba(255,255,255,0.5);
}


/* Nan ƒë√¥i ph√°t s√°ng */
.spoke {
  position: absolute;
  left: 50%;
  top: 50%;
  width: 8px;    
  height: 100px; 
  background: repeating-linear-gradient(
    to right,
    #3b82f6, #3b82f6 2px,
    transparent 2px, transparent 6px
  );
  transform-origin: center top;
  z-index: 1;
  border-radius: 3px;
  box-shadow: 0 0 8px rgba(59, 130, 246, 0.8); /* glow xanh */
}

.door:nth-child(1) { background: radial-gradient(circle, #fde68a, #d97706); }
.door:nth-child(2) { background: radial-gradient(circle, #fde68a, #d97706); }
.door:nth-child(3) { background: radial-gradient(circle, #fde68a, #d97706); }
.door:nth-child(4) { background: radial-gradient(circle, #fde68a, #d97706); }
.door:nth-child(5) { background: radial-gradient(circle, #fde68a, #d97706); }
.door:nth-child(6) { background: radial-gradient(circle, #fde68a, #d97706); }
.door:nth-child(7) { background: radial-gradient(circle, #fde68a, #d97706); }
.door:nth-child(8) { background: radial-gradient(circle, #fde68a, #d97706); }

.door.dim {
  opacity: 0.2;
  filter: grayscale(100%);
  transition: all 0.2s ease;
}

.door.highlight {
  opacity: 1 !important;
  filter: none !important;
  box-shadow: 0 0 30px 10px yellow, inset 0 0 10px #fff;
  border-radius: 50%;
  transition: all 0.2s ease;
}

/* Hi·ªáu ·ª©ng cho ·∫£nh tr√∫ng th∆∞·ªüng */
.door.winner img {
  border: 5px solid gold;
  border-radius: 50%;
  box-shadow: 0 0 30px 15px lime;
  animation: blinkWinner 0.6s infinite;
}

@keyframes blinkWinner {
  0%   { transform: scale(1);   box-shadow: 0 0 10px 5px yellow; }
  50%  { transform: scale(1.2); box-shadow: 0 0 30px 15px lime; }
  100% { transform: scale(1);   box-shadow: 0 0 10px 5px yellow; }
}


/* Animation vi·ªÅn s√°ng */
@keyframes glowBox {
  0% {
  box-shadow: 0 0 10px gold, 0 0 20px #ffcc00, 0 0 30px #ff9900;
  }
  100% {
  box-shadow: 0 0 20px #fff000, 0 0 35px gold, 0 0 50px orange;
  }
}

/* Overlay */
#resultModal {
  display: none;
  position: fixed;
  top:0; left:0;
  width:100%; height:100%;
  background: rgba(0,0,0,0.7);
  justify-content:center;
  align-items:center;
  z-index:3000;
  opacity: 0;
  transition: opacity 0.5s ease;
}

/* Khi hi·ªÉn th·ªã */
#resultModal.show {
  display: flex;
  opacity: 1;
}

/* Khi ·∫©n */
#resultModal.hide {
  opacity: 0;
  transition: opacity 0.5s ease;
}

/* H·ªôp th√¥ng b√°o sang tr·ªçng */
#resultModal .modal-box {
  background: linear-gradient(145deg, #111, #222);
  color:#fff; 
  padding:25px; 
  border-radius:20px; 
  text-align:center; 
  width:380px; 
  border:3px solid gold; 
  box-shadow: 0 0 30px gold, inset 0 0 15px #ffecb3;
  animation: glowBox 1.5s infinite alternate;
  position: relative;
  overflow: hidden;
}

/* Hi·ªáu ·ª©ng √°nh s√°ng di chuy·ªÉn */
#resultModal .modal-box::before {
  content: "";
  position: absolute;
  top: -50%; left: -50%;
  width: 200%; height: 200%;
  background: conic-gradient(from 180deg, gold, transparent 80%);
  animation: rotateShine 6s linear infinite;
  opacity: 0.3;
}

@keyframes rotateShine {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Animation vi·ªÅn s√°ng */
@keyframes glowBox {
  0% {
    box-shadow: 0 0 15px gold, 0 0 30px #ffcc00, 0 0 45px #ff9900;
  }
  100% {
    box-shadow: 0 0 25px #fff000, 0 0 50px gold, 0 0 70px orange;
  }
}

/* Ti√™u ƒë·ªÅ */
#resultModal h2 {
  font-size: 1.8rem;
  color: gold;
  text-shadow: 0 0 10px gold, 0 0 20px orange;
  margin-bottom: 15px;
}

/* Icon k·∫øt qu·∫£ */
#modalResult {
  font-size: 3rem;
  margin: 15px 0;
  animation: pulseIcon 1s infinite alternate;
}

@keyframes pulseIcon {
  from { transform: scale(1); text-shadow: 0 0 10px gold; }
  to   { transform: scale(1.2); text-shadow: 0 0 25px yellow; }
}

/* N√∫t ƒë√≥ng */
#resultModal button {
  margin-top:15px; 
  padding:10px 20px; 
  background: linear-gradient(145deg, gold, orange);
  color:black; 
  font-weight:bold; 
  border-radius:12px; 
  border:none;
  cursor:pointer;
  box-shadow: 0 0 15px gold;
  transition: transform 0.2s ease;
}
#resultModal button:hover {
  transform: scale(1.1);
  box-shadow: 0 0 25px #fff000;
}

.wallet-display {
  display: flex;
  flex-direction: column;
  gap: 15px;
  margin: 15px 0;
}

.balance-box, .jackpot-box {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 12px 18px;
  border-radius: 15px;
  border: 2px solid #fff8dc;
  background: linear-gradient(145deg, #ffd700, #ffcc00);
  box-shadow: 0 0 20px rgba(255,215,0,0.6), inset 0 0 10px rgba(255,255,255,0.5);
  animation: glowBox 2s infinite alternate;
}

.balance-icon, .jackpot-icon {
  font-size: 2rem;
}

.balance-label, .jackpot-label {
  font-size: 0.9rem;
  color: #222;
}

.balance-value, .jackpot-value {
  font-size: 1.6rem;
  font-weight: bold;
  color: #000;
  text-shadow: 0 0 5px #fff, 0 0 10px gold;
}

.jackpot-info progress {
  width: 100%;
  height: 12px;
  border-radius: 8px;
  margin-top: 6px;
}

.jackpot-info progress::-webkit-progress-value {
  background: linear-gradient(90deg, gold, orange);
  border-radius: 8px;
}

@keyframes glowBox {
  from { box-shadow: 0 0 15px gold, inset 0 0 6px #fff; }
  to   { box-shadow: 0 0 30px orange, inset 0 0 12px #fff8dc; }
}


.stats-box {
  display: flex;
  justify-content: space-between;
  background: linear-gradient(145deg, #111, #222);
  padding: 12px 18px;
  border-radius: 15px;
  border: 2px solid gold;
  box-shadow: 0 0 12px rgba(255,215,0,0.3), inset 0 0 8px rgba(255,255,255,0.1);
  font-weight: bold;
  font-size: 1.1rem;
}

.stat-item {
  display: flex;
  align-items: center;
  gap: 8px;
}

.stat-icon {
  font-size: 1.3rem;
}

.stat-value.profit {
  color: #00ff95;
  text-shadow: 0 0 5px #00ff95, 0 0 10px #0f0;
}

.stat-value.loss {
  color: #ff4d4d;
  text-shadow: 0 0 5px #ff4d4d, 0 0 10px #f00;
}

.flash-update {
 animation: flashUpdate 0.6s ease-in-out;
}

@keyframes flashUpdate {
  0%   { color: #fff; text-shadow: 0 0 10px gold, 0 0 20px orange; transform: scale(1.1); }
  50%  { color: #ffd700; text-shadow: 0 0 20px #fff000, 0 0 30px gold; transform: scale(1.2); }
  100% { color: inherit; text-shadow: none; transform: scale(1); }
}


/* Fade + zoom khi m·ªü */
@keyframes modalFadeIn {
  from { opacity: 0; transform: scale(0.8); }
  to   { opacity: 1; transform: scale(1); }
}

/* Fade-out khi ƒë√≥ng */
@keyframes modalFadeOut {
  from { opacity: 1; transform: scale(1); }
  to   { opacity: 0; transform: scale(0.8); }
}

.modal-box {
  animation: modalFadeIn 0.3s ease forwards;
}

#depositConfirmModal.show .modal-box {
  animation: modalFadeIn 0.3s ease forwards;
}

#depositConfirmModal.hide .modal-box {
  animation: modalFadeOut 0.3s ease forwards;
}

.door .bet-display {
  position: absolute;
  bottom: -5px;
  font-size: 14px;
  font-weight: bold;
  color: #fff;
  background: rgba(0,0,0,0.6);
  padding: 2px 6px;
  border-radius: 8px;
  border: 1px solid gold;
  text-shadow: 0 0 5px gold;
}

.door.locked {
  pointer-events: none;
  opacity: 0.5;
  filter: grayscale(100%);
}


  </style>
</head>
<body>
 <div class="game-container">
 <div class="left-panel">
 <h1>üíéLucky Spinüíé</h1>
 <div class="time-display">üïí <span id="currentTime">--:--:--</span></div>

<div class = result>
<div id="spinCounter">üéØ Phi√™n quay: 0</div>
<div id="wheel-container">
  <div id="wheel">
</div>
</div>

<div class="stage">
    <!-- Nan -->
    <div class="spokes">
      <div class="spoke" style="transform: rotate(0deg);"></div>
      <div class="spoke" style="transform: rotate(45deg);"></div>
      <div class="spoke" style="transform: rotate(90deg);"></div>
      <div class="spoke" style="transform: rotate(135deg);"></div>
      <div class="spoke" style="transform: rotate(180deg);"></div>
      <div class="spoke" style="transform: rotate(225deg);"></div>
      <div class="spoke" style="transform: rotate(270deg);"></div>
      <div class="spoke" style="transform: rotate(315deg);"></div>
    </div>


    <!-- Tr·ª•c gi·ªØa -->
    <div class="hub">
    <div id="autoCountdown" style="margin-top:10px; font-weight:bold; color:#00ff95;"><span id="countdownValue"></span></div>
    </div>

   <!-- 8 c·ª≠a xung quanh -->
    <div class="doors">
      <div class="door" data-name="M·ª≥" style="transform: rotate(0deg) translate(0, -150px)  rotate(0deg);">
        <img src="https://img.icons8.com/?size=100&id=j1YyF5JJM5rE&format=png&color=000000" alt="M·ª≥"> 
        <span class="bet-display">0</span>    
      </div>
      <div class="door" data-name="Xi√™n" style="transform: rotate(45deg) translate(0, -150px)  rotate(-45deg);">
        <img src="https://img.icons8.com/?size=100&id=80905&format=png&color=000000" alt="Xi√™n">   
        <span class="bet-display">0</span>       
      </div>
      <div class="door" data-name="ƒê√πi" style="transform: rotate(90deg) translate(0, -150px)  rotate(-90deg);">
        <img src="https://img.icons8.com/?size=100&id=oKobmYkIk0qz&format=png&color=000000" alt="ƒê√πi"> 
        <span class="bet-display">0</span>        
      </div>
      <div class="door" data-name="B√≤" style="transform: rotate(135deg) translate(0, -150px)  rotate(-135deg);">
        <img src="https://img.icons8.com/?size=100&id=hwB2vUsbIvJ2&format=png&color=000000" alt="B√≤">
        <span class="bet-display">0</span>          
      </div>
      <div class="door" data-name="R·ªët" style="transform: rotate(180deg) translate(0, -150px)  rotate(-180deg);">
        <img src="https://img.icons8.com/?size=100&id=6f2WYNoYqbXP&format=png&color=000000" alt="R·ªët">  
        <span class="bet-display">0</span>       
      </div>
      <div class="door" data-name="Ng√¥" style="transform: rotate(225deg) translate(0, -150px)  rotate(-225deg);">
        <img src="https://img.icons8.com/?size=100&id=8Sli9YJl0SaW&format=png&color=000000" alt="Ng√¥">  
        <span class="bet-display">0</span>        
      </div>
      <div class="door" data-name="C·∫£i" style="transform: rotate(270deg) translate(0, -150px)  rotate(-270deg);">
        <img src="https://img.icons8.com/?size=100&id=Bql9wRM8Aqkv&format=png&color=000000" alt="C·∫£i"> 
        <span class="bet-display">0</span>         
      </div>
      <div class="door" data-name="Chua" style="transform: rotate(315deg) translate(0, -150px)  rotate(-315deg);">
        <img src="https://img.icons8.com/?size=100&id=lPmL0NaypRwo&format=png&color=000000" alt="Chua"> 
        <span class="bet-display">0</span>         
      </div>
    </div>
  </div>

<div class="stats-box" id="stats">
<div class="stat-item">
<span class="stat-icon">üìà</span>
<span class="stat-label">L√£i:</span>
<span class="stat-value profit">0 xu</span>
</div>
<div class="stat-item">
<span class="stat-icon">üìâ</span>
<span class="stat-label">L·ªó:</span>
<span class="stat-value loss">0 xu</span>
</div>
</div>


<div class="wallet-display">
<div class="balance-box">
<div class="balance-icon">üí∞</div>
<div class="balance-info">
<div class="balance-label">S·ªë d∆∞ xu</div>
<div class="balance-value"><span id="balance">0</span></div>
</div>
</div>

<div class="jackpot-box">
<div class="jackpot-icon">üé∞</div>
<div class="jackpot-info">
<div class="jackpot-label">Jackpot</div>
<div class="jackpot-value"><span id="jackpot">0</span></div>
<progress id="jackpotProgress" max="5000" value="0"></progress>
</div>
</div>
</div>


<div class="result" id="result">K·∫øt qu·∫£ tr·∫£ th∆∞·ªüng...</div>
<div class="history" id="history">üßæ <b>L·ªãch s·ª≠ k·∫øt qu·∫£:</b><br></div>

<div id="suggestion" style="font-weight:bold; color:#00ccff; margin:10px 0;">
</div>
</div>





</div>


<div class="right-panel">
<h1>üíéJackpotüíé</h1>
<div class="time-display"> SƒÉn h≈© tr√∫ng l·ªõn</div>

 <form id="betForm" class="bet-section">
  <div class="bet-box" data-name="Chua"><span class="icon">üçÖ</span><span class="bet-amount">0</span><br><small>Win 5 times</small></div>  
  <div class="bet-box" data-name="C·∫£i"><span class="icon">ü•¨</span><span class="bet-amount">0</span><br><small>Win 5 times</small></div>  
  <div class="bet-box" data-name="Ng√¥"><span class="icon">üåΩ</span><span class="bet-amount">0</span><br><small>Win 5 times</small></div>  
  <div class="bet-box" data-name="R·ªët"><span class="icon">ü•ï</span><span class="bet-amount">0</span><br><small>Win 5 times</small></div>  
  <div class="bet-box" data-name="M·ª≥"><span class="icon">üå≠</span><span class="bet-amount">0</span><br><small>Win 10 times</small></div>
  <div class="bet-box" data-name="Xi√™n"><span class="icon">üç¢</span><span class="bet-amount">0</span><br><small>Win 15 times</small></div>
  <div class="bet-box" data-name="ƒê√πi"><span class="icon">üçñ</span><span class="bet-amount">0</span><br><small>Win 25 times</small></div>
  <div class="bet-box" data-name="B√≤"><span class="icon">ü•©</span><span class="bet-amount">0</span><br><small>Win 45 times</small></div>

  <div class="chip-selector">
  <div class="chip" data-value="10">10</div>
  <div class="chip" data-value="50">50</div>
  <div class="chip" data-value="100">100</div>
  <div class="chip" data-value="1000">1000</div>
  <div class="chip" data-value="10000">10000</div>
  </div>
  <div id="totalBetDisplay" style="margin-top: 10px; font-weight: bold;">T·ªïng c∆∞·ª£c: 0</div>
</form>



<div class="wallet">
<div id="stats" style="margin-top: 10px; font-weight: bold; color: #ffc107;">
</div>
<div> 
</div>
<div>
    <input type="number" id="amount" placeholder="Nh·∫≠p s·ªë xu">
      <button onclick="confirmDeposit()">N·∫°p xu</button>
      <button id="withdrawBtn" onclick="confirmWithdraw()">R√∫t xu</button>
    </div> <br>

    <div class="notification" id="notification"></div>
  </div>

 
  
  <div class="history" id="betHistory">üßæ <b>L·ªãch s·ª≠ ƒë·∫∑t c∆∞·ª£c:</b><br></div>



<audio id="spinSound" src="spin.mp3"></audio>
<audio id="winSound" src="win.mp3"></audio>
<audio id="bigWinSound" src="bigwin.mp3"></audio>

<!-- Modal th√¥ng tin n·∫°p xu -->
<div id="depositInfoModal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%;
background: rgba(0,0,0,0.6); justify-content:center; align-items:center; z-index:6000;">
<div class="modal-box" style="background:#111; color:#fff; padding:20px; border-radius:15px; text-align:left; width:400px; border:2px solid gold; box-shadow:0 0 20px gold;">
<h3>üè¶ Th√¥ng tin n·∫°p ti·ªÅn</h3>
<p><b>Ng√¢n h√†ng:</b> Techcombank</p>
<p><b>S·ªë t√†i kho·∫£n:</b> 9436789999</p>
<p><b>Ch·ªß t√†i kho·∫£n:</b> Phan VƒÉn Tu·∫•n</p>
<p><b>N·ªôi dung:</b> <span id="depositCode">--</span></p>
<p id="depositStatus" style="color:orange; font-weight:bold; margin-top:10px;">‚è≥ ƒêang x·ª≠ l√Ω...</p>
<div style="margin-top:15px; text-align:center;">
<button id="closeDepositModal" style="padding:8px 16px; background:red; color:#fff; border:none; border-radius:8px;">ƒê√≥ng</button>
</div>
</div>
</div>

<!-- Modal th√¥ng tin r√∫t xu -->
<div id="withdrawInfoModal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%;
background: rgba(0,0,0,0.6); justify-content:center; align-items:center; z-index:6000;">
<div class="modal-box" style="background:#111; color:#fff; padding:20px; border-radius:15px; text-align:left; width:400px; border:2px solid gold; box-shadow:0 0 20px gold;">
    <h3>üè¶ Th√¥ng tin r√∫t xu</h3>
    
    <label>Ch·ªß t√†i kho·∫£n:</label>
    <input type="text" id="userName" placeholder="Nh·∫≠p t√™n "><br><br>

    <label>T√™n ng√¢n h√†ng:</label>
    <input type="text" id="bankName" placeholder="Nh·∫≠p t√™n ng√¢n h√†ng"><br><br>

    <label>S·ªë t√†i kho·∫£n:</label>
    <input type="text" id="userAccount" placeholder="Nh·∫≠p s·ªë t√†i kho·∫£n"><br><br>

    <label>S·ªë xu mu·ªën r√∫t:</label>
    <input type="number" id="withdrawAmount" placeholder="Nh·∫≠p s·ªë xu"><br><br>

    <p id="withdrawStatus" style="margin:10px 0; font-weight:bold; color:orange;"></p>
    
<div style="margin-top:15px; text-align:center;">
<button id="sendWithdrawBtn" style="padding:8px 16px; background:green; color:#fff; border:none; border-radius:8px;">G·ª≠i y√™u c·∫ßu</button>
<button id="closeWithdrawModal" style="padding:8px 16px; background:red; color:#fff; border:none; border-radius:8px;">ƒê√≥ng</button>
</div>
</div>
</div>

<!-- Modal th√¥ng b√°o k·∫øt qu·∫£ -->
<div id="resultModal">
<div class="modal-box">
<h2>üéâ K·∫øt qu·∫£ quay üéâ</h2>
<div id="modalResult"></div>
<p><b>üéØ Phi√™n quay:</b> <span id="modalSpin"></span></p>
<p><b>K·∫øt qu·∫£ v√≤ng n√†y:</b> <span id="modalWinner"></span></p>
<p><b>Chi·∫øn th·∫Øng:</b> <span id="modalWin"></span></p>
<p><b>S·ªë xu ƒë√£ c∆∞·ª£c:</b> <span id="modalBet"></span></p>   
</div>
</div>
</div>


<!-- Modal x√°c nh·∫≠n n·∫°p xu -->
<div id="depositConfirmModal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%;
background: rgba(0,0,0,0.6); justify-content:center; align-items:center; z-index:5000;">
<div class="modal-box" style="background:#111; color:#fff; padding:20px; border-radius:15px; text-align:center; width:350px; border:2px solid gold; box-shadow:0 0 20px gold;">
<h3>‚ö†Ô∏è X√°c nh·∫≠n n·∫°p xu</h3>
<p id="depositConfirmText">B·∫°n c√≥ ch·∫Øc mu·ªën n·∫°p ... xu?</p>
<div style="margin-top:15px; display:flex; justify-content:space-around;">
<button id="depositYes" style="padding:10px 20px; background:green; color:#fff; border:none; border-radius:8px;">X√°c nh·∫≠n</button>
<button id="depositNo" style="padding:10px 20px; background:red; color:#fff; border:none; border-radius:8px;">H·ªßy</button>
</div>
</div>
</div>




<!-- Modal x√°c nh·∫≠n r√∫t xu -->
<div id="withdrawConfirmModal" class="modal" style="display:none; position: fixed; top:0; left:0; width:100%; height:100%; background: rgba(0,0,0,0.6); justify-content:center; align-items:center; z-index:1000;">
<div style="background:#222; color:#fff; padding:20px; border-radius:12px; text-align:center; width:320px;">
<h3>‚ö†Ô∏è X√°c nh·∫≠n r√∫t xu</h3>
<p id="withdrawConfirmText">B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën r√∫t ... xu?</p>
<div style="margin-top:15px; display:flex; justify-content:space-around;">
<button id="confirmYes" style="padding:8px 16px; background:green; color:#fff; border:none; border-radius:8px;">X√°c nh·∫≠n</button>
<button id="confirmNo" style="padding:8px 16px; background:red; color:#fff; border:none; border-radius:8px;">H·ªßy</button>
</div>
</div>
</div>





<script>

let countdownDuration = 40; // s·ªë gi√¢y m·ªói phi√™n
let lastSpinTime = parseInt(localStorage.getItem("lastSpinTime")) || Date.now();
let pauseAfterSpin = false;
let pauseTimer = 0;
let autoInterval;


let spinCount = parseInt(localStorage.getItem("spinCount")) || 0;
let wheelRotation = 0;
let spinInterval;
let isSpinning = false;
// L·∫•y balance t·ª´ localStorage (n·∫øu c√≥)
let balance = parseInt(localStorage.getItem("balance")) || 0;
let jackpot = parseInt(localStorage.getItem("jackpot")) || 0;
let netProfit = parseInt(localStorage.getItem("netProfit")) || 0; // Ch√™nh l·ªách xu l·ªùi
let netLoss = parseInt(localStorage.getItem("netLoss")) || 0;   // Ch√™nh l·ªách xu l·ªó
let currentChip = 0; // chip ƒëang ch·ªçn
let bets = {}; // l∆∞u tr·ªØ c∆∞·ª£c hi·ªán t·∫°i // l∆∞u s·ªë xu ƒë·∫∑t c∆∞·ª£c theo t·ª´ng c·ª≠a

const SPIN_DURATION = 40; // 40 gi√¢y 1 phi√™n
const spinCounterEl = document.getElementById("spinCounter");
const balanceEl = document.getElementById("balance");
const jackpotEl = document.getElementById("jackpot");
const notificationEl = document.getElementById("notification");
const historyEl = document.getElementById("history");
const betHistoryEl = document.getElementById("betHistory");
const JACKPOT_THRESHOLD = 5000;
const JACKPOT_CHANCE = 0.01;
const wheelEl = document.getElementById("wheel");
const options = [
  { name: "Chua", icon: "üçÖ", weight: 19.2, reward: 5 },
  { name: "C·∫£i", icon: "ü•¨", weight: 19.2, reward: 5 },
  { name: "Ng√¥", icon: "üåΩ", weight: 19.2, reward: 5 },
  { name: "R·ªët", icon: "ü•ï", weight: 19.2, reward: 5 },
  { name: "M·ª≥", icon: "üå≠", weight: 10, reward: 10 },
  { name: "Xi√™n", icon: "üç¢", weight: 6.67, reward: 15 },
  { name: "ƒê√πi", icon: "üçñ", weight: 4, reward: 25 },
  { name: "B√≤", icon: "ü•©", weight: 2.53, reward: 45 },
];



// H√†m th√™m l·ªãch s·ª≠ ƒë·∫∑t c∆∞·ª£c
  function addBetHistory(betName, amount) {
  const time = new Date().toLocaleTimeString();
  const entry = { time, betName, amount };

  // Th√™m v√†o giao di·ªán
  betHistoryEl.innerHTML += `‚è∞ ${time} - ƒê·∫∑t ${amount} xu v√†o ${betName}<br>`;

  // L∆∞u v√†o localStorage
  let betHistory = JSON.parse(localStorage.getItem("betHistory")) || [];
  betHistory.push(entry);
  localStorage.setItem("betHistory", JSON.stringify(betHistory));
}

// Kh√¥i ph·ª•c khi load l·∫°i trang
  window.addEventListener("load", () => {
  let betHistory = JSON.parse(localStorage.getItem("betHistory")) || [];
  if (betHistory.length > 0) {
  betHistoryEl.innerHTML = "üßæ <b>L·ªãch s·ª≠ ƒë·∫∑t c∆∞·ª£c:</b><br>";
  betHistory.forEach(entry => {
  betHistoryEl.innerHTML += `‚è∞ ${entry.time} - ƒê·∫∑t ${entry.amount} xu v√†o ${entry.betName}<br>`;
  });
  }
  document.querySelectorAll('.chip, .bet-box').forEach(el => el.classList.remove('lock-bets'));

  renderHistory();
  updateBalanceDisplay();
  updateJackpotDisplay();
  updateStatsDisplay();
  restoreBets();
});

  function resetHistoryDaily() {
  let today = new Date().toLocaleDateString();
  let savedDate = localStorage.getItem("betHistoryDate");
  if (savedDate !== today) {
  localStorage.removeItem("betHistory");
  localStorage.setItem("betHistoryDate", today);
  }
}
resetHistoryDaily();

// L·∫•y m·ªëc 0h h√¥m nay
  function getStartOfDay() {
  const now = new Date();
  return new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0, 0).getTime();
}

// T√≠nh s·ªë phi√™n hi·ªán t·∫°i
  function getCurrentSpinNumber() {
  const startTime = getStartOfDay();
  const now = Date.now();
  const elapsedSeconds = Math.floor((now - startTime) / 1000);
  return Math.floor(elapsedSeconds / SPIN_DURATION) + 1;
}




document.querySelectorAll('#betForm input').forEach(input => {
input.addEventListener('input', updateTotalBetDisplay);
});


// N·∫øu ch∆∞a c√≥ th√¨ set m·ªëc ban ƒë·∫ßu
if (!lastSpinTime) {
  lastSpinTime = Date.now();
  localStorage.setItem("lastSpinTime", lastSpinTime);
}

// T√≠nh th·ªùi gian c√≤n l·∫°i khi load l·∫°i trang
  function getRemainingTime() {
  const now = Date.now();
  const elapsed = Math.floor((now - lastSpinTime) / 1000); // s·ªë gi√¢y ƒë√£ tr√¥i qua
  let remaining = countdownDuration - elapsed;

  if (remaining <= 0) {
  lastSpinTime = now;
  localStorage.setItem("lastSpinTime", lastSpinTime);
  remaining = countdownDuration;
  }
  return remaining;
}

let countdownValue = getRemainingTime();
 
// H√†m render ra giao di·ªán ngay l·∫≠p t·ª©c
  function renderCountdown() {
  const countdownEl = document.getElementById("autoCountdown");
  countdownEl.innerHTML = `<span id="countdownValue">${countdownValue}</span>`;
}

//Hi·ªÉn th·ªã ngay khi load
  renderCountdown();


  // Hi·ªÉn th·ªã ƒë·∫øm ng∆∞·ª£c
  function startCountdown() {
  const timer = setInterval(() => {
  const countdownEl = document.getElementById("autoCountdown");
// N·∫øu ƒëang trong th·ªùi gian ch·ªù sau khi quay
  if (pauseAfterSpin) {
  if (pauseTimer > 0) {
  countdownEl.innerHTML = `<span>${pauseTimer}</span>`;
  countdownEl.classList.add("blink-yellow"); // v√†ng nh·∫•p nh√°y
  pauseTimer--;
  } 
  else {
  countdownValue = 35; // reset v·ªÅ 35 gi√¢y
  pauseAfterSpin = false;
  countdownEl.classList.remove("blink-yellow");
  renderCountdown(); // hi·ªÉn th·ªã l·∫°i
  countdownEl.innerHTML = `<span id="countdownValue">${countdownValue}</span>`;
  }
  return;
  }

  countdownValue--;
  countdownEl.textContent = `${countdownValue}`;
  if (countdownValue === 20) {
    suggestResult();
  }
  if (countdownValue <= 5) {
  countdownEl.classList.add("blink"); // ƒë·ªè nh·∫•p nh√°y
  } 
  else {
  countdownEl.classList.remove("blink");
  }
  countdownEl.innerHTML = `<span id="countdownValue">${countdownValue}</span>`;

  if (countdownValue <= 0) {
  lockDoors();   // kh√≥a ƒë·∫∑t c∆∞·ª£c
  if (!isSpinning) {
  spinWheel();
  startDoorAnimation();
  }
// Sau khi quay th√¨ pause 4 gi√¢y
  pauseAfterSpin = true;
  pauseTimer = 4;
  countdownEl.classList.remove("blink"); // t·∫Øt ƒë·ªè nh·∫•p nh√°y
  
  lastSpinTime = Date.now();
  localStorage.setItem("lastSpinTime", lastSpinTime);
  countdownValue = countdownDuration;
  }
  renderCountdown(); // c·∫≠p nh·∫≠t m·ªói gi√¢y
  countdownEl.innerHTML = `<span id="countdownValue">${countdownValue}</span>`;
  }, 1000);
}
startCountdown();

  function suggestResult() {
  const totalWeight = options.reduce((sum, opt) => sum + opt.weight, 0);
  let rand = Math.random() * totalWeight;
  let cumWeight = 0;
  let chosen = null;

  for (let opt of options) {
  cumWeight += opt.weight;
  if (rand <= cumWeight) {
  chosen = opt;
  break;
  }
  }
  if (chosen) {
 /* const hotText = `üî• Hot: ${chosen.name} ${chosen.icon}`;*/
/*
//  1) Hi·ªÉn th·ªã ·ªü khu v·ª±c suggestion
  document.getElementById("suggestion").textContent = hotText;
*/
//  2) L∆∞u l·∫°i v√†o localStorage
 /* localStorage.setItem("lastHot", hotText);*/
  localStorage.setItem("lastHotName", chosen.name);

 // 3) X√≥a nh√£n c≈© trong bet-box & c·ª≠a
  document.querySelectorAll(".bet-box .hot-label").forEach(el => el.remove());
  document.querySelectorAll(".door .hot-label").forEach(el => el.remove());


//Hi·ªÉn th·ªã ·ªü bet-box
  const box = document.querySelector(`.bet-box[data-name="${chosen.name}"]`);
  if (box) {
  const label = document.createElement("div");
  label.className = "hot-label";
  label.textContent = `üî• Hot`;
  box.prepend(label);
  }


//Hi·ªÉn th·ªã tr√™n √¥ quay th∆∞·ªüng
  const door = document.querySelector(`.door[data-name="${chosen.name}"]`);
  if (door) {
  const label = document.createElement("div");
  label.className = "hot-label";
  label.textContent = "üî• Hot";
  door.appendChild(label);
  }
  }
}

//Khi load l·∫°i trang, hi·ªÉn th·ªã l·∫°i Hot n·∫øu c√≥
  const savedHot = localStorage.getItem("lastHot");
  if (savedHot) {
  document.getElementById("suggestion").textContent = savedHot;
}

  const savedHotName = localStorage.getItem("lastHotName");
  if (savedHotName) {
// X√≥a Hot c≈©
  document.querySelectorAll(".bet-box .hot-label").forEach(el => el.remove());
  document.querySelectorAll(".door .hot-label").forEach(el => el.remove());
// Hi·ªÉn th·ªã l·∫°i ·ªü bet-box
  const betBox = document.querySelector(`.bet-box[data-name="${savedHotName}"]`);
  if (betBox) {
  const label = document.createElement("div");
  label.className = "hot-label";
  label.textContent = "üî• Hot";
  betBox.prepend(label);
  }
// Hi·ªÉn th·ªã l·∫°i ·ªü c·ª≠a quay th∆∞·ªüng
  const door = document.querySelector(`.door[data-name="${savedHotName}"]`);
  if (door) {
  const label = document.createElement("div");
  label.className = "hot-label";
  label.textContent = "üî• Hot";
  door.appendChild(label);
  }
}

  function updateBalance() {
  document.getElementById("balance").textContent = balance;
}

// Hi·ªÉn th·ªã giao di·ªán r√∫t xu
  document.getElementById("withdrawBtn").onclick = () => {
  document.getElementById("withdrawInfoModal").style.display = "flex";
};

  document.getElementById("closeWithdrawModal").onclick = () => {
  document.getElementById("withdrawInfoModal").style.display = "none";
};



// X·ª≠ l√Ω r√∫t xu
  document.getElementById("sendWithdrawBtn").onclick = () => {
  const name = document.getElementById("userName").value;
  const bank = document.getElementById("bankName").value;
  const account = document.getElementById("userAccount").value;
  const amount = parseInt(document.getElementById("withdrawAmount").value);
  const status = document.getElementById("withdrawStatus");

  if (!name || !bank || !account || !amount || amount <= 0) {
  status.textContent = "‚ö†Ô∏è Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin.";
  status.style.color = "red";
  return;
  }

  if (amount > balance) {
  status.textContent = "‚ö†Ô∏è S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ r√∫t.";
  status.style.color = "red";
  return;
  }

// Tr·ª´ xu ngay khi g·ª≠i y√™u c·∫ßu
  balance -= amount;
  updateBalanceDisplay();

  // Hi·ªán tr·∫°ng th√°i ch·ªù x·ª≠ l√Ω
  status.style.color = "orange";
  status.textContent = "‚è≥ G·ª≠i y√™u c·∫ßu th√†nh c√¥ng, h·ªá th·ªëng ƒëang x·ª≠ l√Ω...";

// Th·ªùi gian x·ª≠ l√Ω ng·∫´u nhi√™n t·ª´ 90s -> 120s
  let wait = Math.floor(Math.random() * (120 - 90 + 1)) + 90; // random 90-120 gi√¢y

  const countdown = setInterval(() => {
  wait--;
  status.textContent = `‚è≥ H·ªá th·ªëng ƒëang x·ª≠ l√Ω...`;
  if (wait <= 0) {
  clearInterval(countdown);
  status.textContent = "‚úÖ R√∫t xu th√†nh c√¥ng!";
  status.style.color = "lightgreen";
  document.getElementById("notification").textContent = `R√∫t xu -${amount} th√†nh c√¥ng, ti·ªÅn ƒëang ƒë∆∞·ª£c chuy·ªÉn t·ªõi t√†i kho·∫£n.`;

// T·∫Øt notification sau 10s
   setTimeout(() => {
   document.getElementById("notification").textContent = "";
   }, 10000);


// ·∫®n modal sau 5s
   setTimeout(() => {
   document.getElementById("withdrawInfoModal").style.display = "none";
   status.textContent = "";
   }, 5000);
}
}, 1000);
};


  function showBankInfo() {
  const amount = parseInt(document.getElementById("amount").value) || 0;
  if (amount > 0) {
  document.getElementById("bankInfo").style.display = "block";
  document.getElementById("depositStatus").textContent = 'B·∫•m g·ª≠i y√™u c·∫ßu n·∫°p sau khi chuy·ªÉn kho·∫£n.';
  } else {
  alert("Vui l√≤ng nh·∫≠p s·ªë xu mu·ªën n·∫°p!");
  }
}

  function sendDepositRequest() {
  const amount = parseInt(document.getElementById("amount").value) || 0;
  if (amount > 0) {
  if (confirm(` X√°c nh·∫≠n chuy·ªÉn kho·∫£n th√†nh c√¥ng !`)) {
  // Hi·ªán th√¥ng tin ng√¢n h√†ng
  document.getElementById("bankInfo").style.display = "block";
  // Tr·∫°ng th√°i ch·ªù
  const status = document.getElementById("depositStatus");
  let timeLeft = 35;  
  status.style.color = "orange";
  status.textContent = `‚è≥ G·ª≠i y√™u c·∫ßu th√†nh c√¥ng, h·ªá th·ªëng ƒëang x·ª≠ l√Ω...`;
  // ƒê·∫øm ng∆∞·ª£c 30s r·ªìi c·ªông xu
  const countdown = setInterval(() => {
  timeLeft--;
  if (timeLeft <= 0) {
  clearInterval(countdown);
  deposit(amount);
  status.textContent = `‚úÖ N·∫°p th√†nh c√¥ng ${amount} xu v√†o t√†i kho·∫£n!`;
  status.style.color = "lightgreen";
  document.getElementById("notification").textContent = `N·∫°p th√†nh c√¥ng +${amount} xu.`;

  // Sau 5 gi√¢y ·∫©n giao di·ªán ng√¢n h√†ng
  setTimeout(() => {
  document.getElementById("bankInfo").style.display = "none";
  }, 5000);
  }
  }, 1000);
  }
  } else {
  alert("Vui l√≤ng nh·∫≠p s·ªë xu mu·ªën n·∫°p!");
  }
}


  function updateBetDisplay() {
  document.querySelectorAll(".bet-box").forEach(box => {
  const name = box.dataset.name;
  box.querySelector(".bet-amount").textContent = bets[name];
  });

  const total = Object.values(bets).reduce((a,b)=>a+b,0);
  document.getElementById("totalBetDisplay").textContent = `T·ªïng c∆∞·ª£c: ${total}`;
}


  function updateJackpotDisplay() {
  const oldVal = parseInt(jackpotEl.textContent.replace(/\D/g,'')) || 0;
  animateNumber(jackpotEl, oldVal, jackpot, 600);
  document.getElementById("jackpotProgress").value = jackpot;
  localStorage.setItem("jackpot", jackpot);
}
 
  function updateBalanceDisplay() {
  const oldVal = parseInt(balanceEl.textContent.replace(/\D/g,'')) || 0;
  animateNumber(balanceEl, oldVal, balance, 600);
  localStorage.setItem("balance", balance);
}
   
  function showNotification(message) {
  notificationEl.textContent = message;
  setTimeout(() => notificationEl.textContent = "", 3000);
}

//H√†m n·∫°p xu.
 function confirmDeposit() {
 const amount = parseInt(document.getElementById("amount").value) || 0;
 if (amount <= 0) {
 alert("Vui l√≤ng nh·∫≠p s·ªë xu mu·ªën n·∫°p!");
 return;
 }

 const modal = document.getElementById("depositConfirmModal");
 document.getElementById("depositConfirmText").textContent =
 `B·∫°n c√≥ ch·∫Øc mu·ªën n·∫°p ${amount} xu kh√¥ng?`;

// Hi·ªán modal v·ªõi hi·ªáu ·ª©ng fade-in
  modal.style.display = "flex";
  modal.classList.remove("hide");
  modal.classList.add("show");

 // N√∫t H·ªßy
  document.getElementById("depositNo").onclick = () => {
  modal.classList.remove("show");
  modal.classList.add("hide");
  setTimeout(() => { modal.style.display = "none"; }, 300); // ƒë·ª£i animation xong
  };

  // N√∫t X√°c nh·∫≠n
  document.getElementById("depositYes").onclick = () => {
  modal.classList.remove("show");
  modal.classList.add("hide");
  setTimeout(() => { modal.style.display = "none"; }, 300);
  startDepositProcess(amount);
  };
}

 // H√†m x·ª≠ l√Ω n·∫°p xu sau khi x√°c nh·∫≠n
 function startDepositProcess(amount) {
 const code = "NAP" + Math.floor(100000 + Math.random() * 900000);
 const modal = document.getElementById("depositInfoModal");
 const status = document.getElementById("depositStatus");

// Hi·ªán modal th√¥ng tin n·∫°p
 document.getElementById("depositCode").textContent = code;
 modal.style.display = "flex";
 status.style.color = "orange";
 status.innerHTML = `<br><span id="codeExpiry"></span>`;

// ƒê·∫øm ng∆∞·ª£c th·ªùi gian h·∫øt h·∫°n (30 ph√∫t)
 let expiryTime = 10 * 60; // 10 ph√∫t
 clearInterval(window.expiryTimer); // n·∫øu tr∆∞·ªõc ƒë√≥ c√≤n ch·∫°y th√¨ h·ªßy
 window.expiryTimer = setInterval(() => {
 expiryTime--;
 if (expiryTime > 0) {
 const minutes = Math.floor(expiryTime / 60);
 const seconds = expiryTime % 60;
 document.getElementById("codeExpiry").textContent =
 `M√£ h·∫øt h·∫°n sau ${minutes}:${seconds.toString().padStart(2, "0")}`;
 } else {
 clearInterval(window.expiryTimer);
 document.getElementById("codeExpiry").textContent = "‚ùå M√£ ƒë√£ h·∫øt h·∫°n!";
 document.getElementById("codeExpiry").style.color = "red";
    }
    }, 1000);
// Th·ªùi gian x·ª≠ l√Ω n·∫°p (ng·∫´u nhi√™n 60‚Äì90 gi√¢y)
 let wait = Math.floor(Math.random() * (60 - 30 + 1)) + 60;
 clearInterval(window.processTimer); // h·ªßy n·∫øu c√≥ timer c≈©
 window.processTimer = setInterval(() => {
 wait--;
 if (wait > 0) {
 status.innerHTML = `
 <span id="codeExpiry">Code h·∫øt h·∫°n sau: ${Math.floor(expiryTime / 60)}:${(expiryTime % 60).toString().padStart(2,"0")}</span>
 `;
 } else {
 clearInterval(window.processTimer);
 deposit(amount);
 status.innerHTML = `‚úÖ N·∫°p th√†nh c√¥ng ${amount} xu v√†o t√†i kho·∫£n!<br>
 `;
 status.style.color = "lightgreen";
 document.getElementById("notification").textContent = `N·∫°p th√†nh c√¥ng +${amount} xu.`;
 setTimeout(() => {
 document.getElementById("notification").textContent = "";
 }, 10000);
// Modal fade-out sau 5s
 setTimeout(() => {
 modal.classList.remove("show");
 modal.classList.add("hide");
 setTimeout(() => { modal.style.display = "none"; }, 300);
 }, 5000);
 }
 }, 1000);
 document.getElementById("closeDepositModal").onclick = () => {
 modal.classList.remove("show");
 modal.classList.add("hide");
 setTimeout(() => { modal.style.display = "none"; }, 300);
 clearInterval(window.expiryTimer);
 clearInterval(window.processTimer);
 };
}

  function confirmWithdraw() {
  const amount = parseInt(document.getElementById("amount").value);
  const balanceEl = document.getElementById("balance");
  if (isNaN(amount) || amount <= 0) {
  alert("Vui l√≤ng nh·∫≠p s·ªë xu h·ª£p l·ªá ƒë·ªÉ r√∫t.");
  return;
  }
  if (amount > balance) {
  alert("Kh√¥ng th·ªÉ r√∫t xu v√¨ s·ªë d∆∞ kh√¥ng ƒë·ªß.");
  return;
  }
  if (confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën r√∫t ${amount} xu kh√¥ng?`)) {
  balance -= amount;
  balanceEl.textContent = balance;
  document.getElementById("notification").textContent = `R√∫t xu th√†nh c√¥ng -${amount}`;
  }
}

  function deposit(amount) {
  balance += amount;
  updateBalanceDisplay();
}
    
  function withdraw(amount) {
  balance -= amount;
  updateBalanceDisplay();
  showNotification(`-${amount} xu ƒë√£ ƒë∆∞·ª£c r√∫t.`);
}

  function confirmClearBetHistory() {
  if (confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a l·ªãch s·ª≠ ƒë·∫∑t c∆∞·ª£c?")) {
  clearBetHistory();
  }
}
   
  function confirmClearResultHistory() {
  if (confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a l·ªãch s·ª≠ k·∫øt qu·∫£?")) {
  clearResultHistory();
  }
}

  function clearBetHistory() {
  betHistoryEl.innerHTML = "üßæ <b>L·ªãch s·ª≠ ƒë·∫∑t c∆∞·ª£c:</b><br>";
}
    
  function clearResultHistory() {
  historyEl.innerHTML = "üå° <b>L·ªãch s·ª≠ k·∫øt qu·∫£:</b><br>";
}
    
  function renderWheel() {
  const angleStep = 360 / options.length;
  wheelEl.innerHTML = ""; // x√≥a c≈©
  options.forEach((opt, index) => {
  const segment = document.createElement("div");
  segment.className = "segment";
  segment.textContent = opt.icon;
  segment.style.transform = `rotate(${index * angleStep}deg) translate(0, -85%)`;
  wheelEl.appendChild(segment);
  });
}
  renderWheel();
    
/// H√†m th√™m k·∫øt qu·∫£ v√†o l·ªãch s·ª≠ (gi·ªØ t·ªëi ƒëa 8)
  function addResultToHistory(icon) {
  let Results = JSON.parse(localStorage.getItem("Results")) || [];

  // th√™m k·∫øt qu·∫£ m·ªõi v√†o ƒë·∫ßu m·∫£ng
  Results.unshift(icon);

  // gi·ªõi h·∫°n 8 k·∫øt qu·∫£
  if (Results.length > 8) {
    Results = Results.slice(0, 8);
  }

  // l∆∞u l·∫°i
  localStorage.setItem("Results", JSON.stringify(Results));

  // c·∫≠p nh·∫≠t hi·ªÉn th·ªã
  renderHistory();
}

// L∆∞u l·ªãch s·ª≠ v√†o localStorage
function saveHistory() {
  const data = historyEl.innerHTML.replace('üßæ <b>L·ªãch s·ª≠ k·∫øt qu·∫£:</b><br>', '');
  localStorage.setItem("historyData", data);
}

// Kh√¥i ph·ª•c l·ªãch s·ª≠ khi F5
  function loadHistory() {
  const saved = localStorage.getItem("historyData");
  if (saved) {
   historyEl.innerHTML = 'üßæ <b>L·ªãch s·ª≠ k·∫øt qu·∫£:</b><br>' + saved;
  }
}

 // G·ªçi khi trang load
  window.addEventListener("load", loadHistory);

  function addHistory(resultIcon) {
  saveHistory();
  }

// H√†m hi·ªÉn th·ªã l·ªãch s·ª≠ ra giao di·ªán
  function renderHistory() {
  const historyEl = document.getElementById("history");
  historyEl.innerHTML = "üßæ <b>L·ªãch s·ª≠ k·∫øt qu·∫£:</b><br>";
  let Results = JSON.parse(localStorage.getItem("Results")) || [];
  Results.forEach(icon => {
  const span = document.createElement("span");
  span.className = "result-item";
  span.textContent = icon + " ";
  historyEl.appendChild(span);
  });
 
}




// g·ªçi khi t·∫£i l·∫°i trang ƒë·ªÉ load l·ªãch s·ª≠ c≈©
  window.onload = () => {
   // c≈©ng load l·∫°i s·ªë d∆∞ ƒë√£ l∆∞u
};

  function spinWheel() {
  if (isSpinning) return;
  isSpinning = true;
  document.querySelectorAll('.chip, .bet-box').forEach(chip => chip.classList.add('lock-bets'));
  const resultEl = document.getElementById("result");
  let totalBet = Object.values(bets).reduce((a,b)=>a+b,0);
  for (let key in bets) {
  let val = parseFloat(bets[key]);
  if (isNaN(val) || val < 0) {
  resultEl.textContent = `‚ùå C∆∞·ª£c kh√¥ng h·ª£p l·ªá ·ªü c·ª≠a ${key}`;
  return;}
  }
  document.getElementById("spinSound").play();
  resultEl.classList.add("spin-animating");
  setTimeout(() => {
  resultEl.classList.remove("spin-animating");
  highlightWinner(selected.name);
  }, 5000);
  const spinDuration = 5; // gi√¢y
  let countdown = spinDuration;
  const selected = weightedRandom(options, bets);
  const anglePerSegment = 360 / options.length;
  const selectedIndex = options.findIndex(opt => opt.name === selected.name);
  const randomOffset = Math.random() * anglePerSegment; // gi√∫p k·∫øt qu·∫£ tr√¥ng t·ª± nhi√™n h∆°n
  const targetAngle = (360 - (selectedIndex * anglePerSegment + anglePerSegment / 2)%360);
  const extraSpins = 5;
  const targetRotation = 360 * extraSpins + targetAngle;
  wheelRotation += targetRotation;
  wheelEl.style.transform = `rotate(${wheelRotation}deg)`;
  const animationInterval = setInterval(() => {
  const tempIcon = options[Math.floor(Math.random() * options.length)].icon;
  resultEl.textContent = `${tempIcon}`;
  }, 100);

  

  const countdownInterval = setInterval(() => {
  countdown--;
  if (countdown <= 0) {
  clearInterval(countdownInterval);
  clearInterval(animationInterval);
  const betAmount = bets[selected.name] || 0;
  const winAmount = betAmount > 0 ? betAmount * selected.reward : 0;
  balance += winAmount;
  updateBalanceDisplay();
  const lostAmount = totalBet - winAmount;
  let profitOrLoss = winAmount - totalBet;
  
// T√≠ch l≈©y h≈© t·ª´ ph·∫ßn c∆∞·ª£c thua
  if (lostAmount > 0) {
  const jackpotContribution = Math.floor(lostAmount * 0.1); // 10% s·ªë xu thua
  jackpot += jackpotContribution;
  updateJackpotDisplay();
  }
  if (profitOrLoss > 0) {
  netProfit += profitOrLoss;
  } 
  else if (profitOrLoss < 0) {
  netLoss += Math.abs(profitOrLoss);
  }
  updateStatsDisplay();
  addResultToHistory(selected.icon);
  let outcome = winAmount > 0 ? `‚úÖ Th·∫Øng ${winAmount}` : `‚ùå Thua`;
  showResultModal(selected, totalBet, winAmount);
  let jackpotWin = 0;
  if (jackpot >= JACKPOT_THRESHOLD && Math.random() < JACKPOT_CHANCE) {
  jackpotWin = Math.floor(jackpot * 0.8);
  jackpot -= jackpotWin;
  balance += jackpotWin;
  updateBalanceDisplay();
  updateJackpotDisplay();
  outcome += ` üéâ N·ªï h≈©! Nh·∫≠n th√™m ${jackpotWin} xu t·ª´ h≈©!`;
  showJackpotEffect();  // Hi·ªÉn th·ªã hi·ªáu ·ª©ng ph√°o hoa + coin bay
  }
  if (totalBet >= 0) {
  resultEl.textContent = `${selected.icon}`;
 // ‚úÖ L∆∞u icon k·∫øt qu·∫£ v√†o localStorage
  localStorage.setItem("lastResultIcon", result.icon);
  localStorage.setItem("lastResult", JSON.stringify(selected));
  } 
  addHistory(result.icon);
  
// B·∫≠t s√°ng c·∫£ √¥ ƒë·∫∑t c∆∞·ª£c tr√∫ng
  const betBox = document.querySelector(`.bet-box[data-name="${selected.name}"]`);
  if (betBox) {
  betBox.classList.add('highlight-win');
  setTimeout(() => {
  setTimeout(() => {
  betBox.classList.remove('highlight-win');
  unlockBets();  
  document.querySelectorAll('.chip, .bet-box').forEach(chip => chip.classList.remove('lock-bets'));
//TƒÉng s·ªë phi√™n quay.
  spinCount++;
  document.getElementById("spinCounter").textContent = `üéØ Phi√™n quay: ${spinCount}`;
  updateSpinCounter();
//Reset c∆∞·ª£c.
  resetBets();
  unlockDoors();
  isSpinning = false;
  clearBets(); // üî• sang v√≤ng m·ªõi th√¨ kh√¥ng gi·ªØ c∆∞·ª£c n·ªØa
  clearHot();  // üî• X√≥a HOT sau 5 gi√¢y khi ƒë√£ tr·∫£ k·∫øt qu·∫£
  },5000);
  highlightWinner(selected.name);
  }, 0); // b·∫•t s√°ng √¥ tr√∫ng v√† t·∫Øt √¥ tr∆∞·ª£t
  }
  if (winAmount >= 1000) {
  resultEl.classList.add("big-win-effect");
  } 
  else if (winAmount > 0) {
  resultEl.classList.add("small-win-effect");
  }
  setTimeout(() => {
  resultEl.classList.remove("big-win-effect", "small-win-effect");
  }, 2000);

//Hi·ªán th·ªã l·ªãch s·ª≠ c∆∞·ª£c.
  if (totalBet > 0) {
  let betLog = `${new Date().toLocaleTimeString()} - C∆∞·ª£c: `;
  for (let key in bets) {
  const val = parseFloat(bets[key]) || 0;
  if (val > 0) betLog += `${key}: ${val} xu, `;
  }
  betLog += `‚Üí K·∫øt qu·∫£: ${selected.icon} - ${outcome}`;
  betHistoryEl.innerHTML += `üßæ ${betLog}<br>`;
  }
  }
  }, 1000);
}

  // H√†m c·∫≠p nh·∫≠t giao di·ªán + l∆∞u
  function updateSpinCounter() {
  const spinNumber = getCurrentSpinNumber();
  spinCounterEl.textContent = `üéØ Phi√™n quay: ${spinNumber}`;
  /*document.getElementById("spinCounter").textContent = `üéØ Phi√™n quay: ${spinCount}`;
  localStorage.setItem("spinCount", spinCount);
  localStorage.setItem("lastSpinDate", getToday());*/
}

// Khi load trang th√¨ hi·ªÉn th·ªã s·ªë phi√™n ƒë√£ l∆∞u
  updateSpinCounter();
  setInterval(updateSpinCounter, 1000);

  function weightedRandom(items,bets) {
  const adjustedItems = items.map(item => {
  const betAmount = parseFloat(bets[item.name]) || 0;        
  let penaltyFactor = 1;
  if (betAmount > 0) {
  penaltyFactor = Math.max(0.2, 1 / (1 + betAmount / 10000000));
  }
  return { ...item, weight: item.weight * penaltyFactor };
  });
  const totalWeight = adjustedItems.reduce((sum, item) => sum + item.weight, 0);
  let rand = Math.random() * totalWeight;
  let cumWeight = 0;
  for (let item of adjustedItems) {
  cumWeight += item.weight;
  if (rand <= cumWeight) {
  return item;
  }
  }
}

  function confirmSpin() {
  const form = document.getElementById("betForm");
  const formData = new FormData(form);
  let totalBet = 0;
  for (const [key, value] of formData.entries()) {
    totalBet += parseInt(value || 0);
  }
  if (totalBet <= 0) {
    alert("Vui l√≤ng ƒë·∫∑t c∆∞·ª£c tr∆∞·ªõc khi quay.");
    return;
  }
  if (confirm(`T·ªïng s·ªë xu ƒë√£ ƒë·∫∑t c∆∞·ª£c: ${totalBet}.\nB·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën quay th∆∞·ªüng?`)) {
   spinWheel();
  }
  }

/*//auto quay
  let autoTime = 35;
  let autoInterval;
  let pauseAfterSpin = false;
  let pauseTimer = 0;

  function startAutoSpinTimer() {
  autoInterval = setInterval(() => {
  const countdownEl = document.getElementById("autoCountdown");
// N·∫øu ƒëang trong th·ªùi gian ch·ªù sau khi quay
  if (pauseAfterSpin) {
  if (pauseTimer > 0) {
  countdownEl.textContent = `‚è≥ ƒêang ch·ªù k·∫øt qu·∫£... ${pauseTimer}s`;
  countdownEl.classList.add("blink-yellow"); // v√†ng nh·∫•p nh√°y
  pauseTimer--;
  } 
  else {
  autoTime = 35; // reset v·ªÅ 35 gi√¢y
  pauseAfterSpin = false;
  countdownEl.classList.remove("blink-yellow");
  countdownEl.textContent = `‚è≥ Quay th∆∞·ªüng sau: ${autoTime} gi√¢y`;
  }
  return;
  }
// B√¨nh th∆∞·ªùng ƒë·∫øm ng∆∞·ª£c 35s
  autoTime--;
  countdownEl.textContent = `‚è≥ Quay th∆∞·ªüng sau: ${autoTime} gi√¢y`;
  if (autoTime === 20) {
    suggestResult();
  }
  if (autoTime <= 5) {
  countdownEl.classList.add("blink"); // ƒë·ªè nh·∫•p nh√°y
  } 
  else {
  countdownEl.classList.remove("blink");
  }
  if (autoTime <= 0) {
  if (!isSpinning) {
  spinWheel();
  }

// Sau khi quay th√¨ pause 4 gi√¢y
  pauseAfterSpin = true;
  pauseTimer = 4;
  countdownEl.classList.remove("blink"); // t·∫Øt ƒë·ªè nh·∫•p nh√°y
  }
  }, 1000);
}*/

  window.onload = function() {
  updateBalanceDisplay();
  updateJackpotDisplay();
  startAutoSpinTimer();
};

  function showJackpotEffect() {
  const container = document.getElementById("jackpotEffect");
  container.innerHTML = "";
// Coin bay xi√™n
  for (let i = 0; i < 20; i++) {
  const coin = document.createElement("div");
  coin.className = "coin";
  const x = `${(Math.random() - 0.5) * 300}px`;
  const y = `${-150 - Math.random() * 200}px`;
  coin.style.left = `${50 + Math.random() * 30 - 15}%`;
  coin.style.bottom = `0`;
  coin.style.setProperty('--x', x);
  coin.style.setProperty('--y', y);
  container.appendChild(coin);
  }
// Fireworks nhi·ªÅu m√†u
  const colors = ['#ff0', '#f0f', '#0ff', '#f55', '#5f5', '#55f', '#ffa500'];
  for (let i = 0; i < 10; i++) {
  const fw = document.createElement("div");
  fw.className = "firework";
  fw.style.left = `${40 + Math.random() * 20}%`;
  fw.style.top = `${30 + Math.random() * 30}%`;
  fw.style.setProperty('--color', colors[Math.floor(Math.random() * colors.length)]);
  container.appendChild(fw);
  }
// M∆∞a xu
  for (let i = 0; i < 30; i++) {
  const rain = document.createElement("div");
  rain.className = "rain-coin";
  rain.style.left = `${Math.random() * 100}%`;
  rain.style.animationDuration = `${2 + Math.random() * 2}s`;
  rain.style.animationDelay = `${Math.random() * 0.5}s`;
  container.appendChild(rain);
  }
  // Xo√° hi·ªáu ·ª©ng sau 3 gi√¢y
  setTimeout(() => container.innerHTML = "", 3000);
}

  function updateTimeDisplay() {
  const now = new Date();
  const timeString = now.toLocaleTimeString('vi-VN', { hour12: false });
  document.getElementById("currentTime").textContent = timeString;
}
  setInterval(updateTimeDisplay, 1000);
  updateTimeDisplay(); // ch·∫°y ngay khi load

  function updateStatsDisplay() {
  const profitEl = document.querySelector(".stat-value.profit");
  const lossEl   = document.querySelector(".stat-value.loss");

  const oldProfit = parseInt(profitEl.textContent.replace(/\D/g,'')) || 0;
  const oldLoss   = parseInt(lossEl.textContent.replace(/\D/g,'')) || 0;

  animateNumber(profitEl, oldProfit, netProfit, 600);
  animateNumber(lossEl, oldLoss, netLoss, 600);

  localStorage.setItem("netProfit", netProfit);
  localStorage.setItem("netLoss", netLoss);
}
  updateStatsDisplay(); // g·ªçi 1 l·∫ßn khi load trang

  function resetStats() {
  if (confirm("Reset th·ªëng k√™ l√£i/l·ªó?")) {
  netProfit = 0;
  netLoss = 0;
  updateStatsDisplay();
  }
}

  function updateJackpotDisplay() {
  jackpotEl.textContent = jackpot.toFixed(0);
  localStorage.setItem("jackpot", jackpot); // üî• l∆∞u l·∫°i jackpot
  document.getElementById("jackpotProgress").value = jackpot;
}

// üîπ Hi·ªÉn th·ªã ngay khi load trang
  updateJackpotDisplay();

  if (jackpot >= JACKPOT_THRESHOLD) {
  document.querySelector('button[onclick="confirmSpin()"]').classList.add('glow');
}


// --- CHIP CH·ªåN TI·ªÄN C∆Ø·ª¢C ---

// Kh·ªüi t·∫°o c∆∞·ª£c = 0 cho t·∫•t c·∫£
  document.querySelectorAll(".bet-box").forEach(box => {
  bets[box.dataset.name] = 0;
});


// --- ch·ªçn chip ---
  document.querySelectorAll(".chip").forEach(chip => {
  chip.addEventListener("click", () => {
  document.querySelectorAll(".chip").forEach(c => c.classList.remove("active"));
  chip.classList.add("active");
  currentChip = parseInt(chip.dataset.value);
  });
});


// --- ƒë·∫∑t c∆∞·ª£c b·∫±ng click √¥ ---
  document.querySelectorAll(".bet-box").forEach(box => {
  box.addEventListener("click", () => {
  if (!currentChip) {
  alert("H√£y ch·ªçn m·ªánh gi√° chip tr∆∞·ªõc!");
  return;
  }
  if (balance < currentChip) {
  alert("Kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c!");
  return;
  }
  if (currentChip > 0) {
  const name = box.dataset.name;
  bets[name] = Number(bets[name] || 0) + Number(currentChip);
  balance -= currentChip;
  updateBalanceDisplay();
  updateBetDisplay();
  saveBets();  // üî• l∆∞u l·∫°i ngay
  }
  });
});

  document.querySelectorAll(".door").forEach(door => {
  door.addEventListener("click", () => {
   if (!currentChip) {
  alert("H√£y ch·ªçn m·ªánh gi√° chip tr∆∞·ªõc!");
  return;
  }
  if (balance < currentChip) {
  alert("Kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c!");
  return;
  }
  const name = door.dataset.name;
  if (!bets[name]) bets[name] = 0;
  bets[name] += currentChip;
  const betDisplay = door.querySelector(".bet-display");
  betDisplay.textContent = bets[name];
  localStorage.setItem("currentBets", JSON.stringify(bets));
  balance -= currentChip;
  updateBalanceDisplay();
  });
});


// --- reset c∆∞·ª£c ---
  function resetBets() {
  bets = {}; // reset object l∆∞u c∆∞·ª£c
  document.querySelectorAll(".door .bet-display").forEach(el => {
  el.textContent = "0"; // reset hi·ªÉn th·ªã v·ªÅ 0
  });
  localStorage.removeItem("currentBets"); // n·∫øu b·∫°n c√≥ l∆∞u v√†o localStorage
  for (let k in bets) bets[k] = 0;
  updateBetDisplay();
}

// L·∫•y ng√†y hi·ªán t·∫°i (yyyy-mm-dd)
  function getToday() {
  let d = new Date();
  return d.getFullYear() + "-" + (d.getMonth() + 1) + "-" + d.getDate();
}

// L·∫•y ng√†y cu·ªëi c√πng l∆∞u trong localStorage
  let lastDate = localStorage.getItem("lastSpinDate");

// N·∫øu kh√°c ng√†y ‚Üí reset v·ªÅ 0
  if (lastDate !== getToday()) {
  spinCount = 0;
  localStorage.setItem("spinCount", spinCount);
  localStorage.setItem("lastSpinDate", getToday());
}

// --- L∆∞u c∆∞·ª£c v√†o localStorage ---
  function saveBets() {
  localStorage.setItem("currentBets", JSON.stringify(bets));
  localStorage.setItem("totalBet", document.getElementById("totalBetDisplay").textContent);
}

// --- Kh√¥i ph·ª•c c∆∞·ª£c khi load l·∫°i ---
  function restoreBets() {
  const savedBets = JSON.parse(localStorage.getItem("currentBets")) || {};
  bets = savedBets;
  Object.keys(bets).forEach(name => {
  bets[name] = Number(bets[name]); // √©p v·ªÅ s·ªë
  const bet = document.querySelector(`.bet-box[data-name="${name}"] .bet-amount`);
  if (bet) bet.textContent = bets[name];

  document.querySelectorAll(".door").forEach(door => {
  const name = door.dataset.name;
  const betDisplay = door.querySelector(".bet-display");
  betDisplay.textContent = bets[name] || 0;
  });
  });

  // T·ªïng c∆∞·ª£c
  const savedTotal = localStorage.getItem("totalBet");
  if (savedTotal) {
  document.getElementById("totalBetDisplay").textContent = savedTotal;
  }
}

// --- Reset c∆∞·ª£c sau khi quay ---
  function clearBets() {
  bets = {};
  document.querySelectorAll(".bet-amount").forEach(el => el.textContent = "0");
  document.getElementById("totalBetDisplay").textContent = "T·ªïng c∆∞·ª£c: 0";
  localStorage.removeItem("currentBets");
  localStorage.removeItem("totalBet");
}

// G·ªçi restore khi trang v·ª´a load
  window.addEventListener("load", restoreBets);
  window.addEventListener("load", () => {
  let savedResult = localStorage.getItem("lastResult");
  if (savedResult) {
  let selected = JSON.parse(savedResult);
  document.getElementById("result").innerHTML = 
  `${selected.icon}`;
  }
});

  function startDoorAnimation(callback) {
  const doors = document.querySelectorAll(".door");
  if (!doors.length) return;
// L√†m t·ªëi t·∫•t c·∫£
  doors.forEach(d => d.classList.add("dim"));
  let index = 0;
  const interval = setInterval(() => {
// T·∫Øt s√°ng
   doors.forEach(d => d.classList.remove("highlight"));
// S√°ng c·ª≠a hi·ªán t·∫°i
   doors[index].classList.add("highlight");
   index = (index + 1) % doors.length;
   }, 100); // ƒë·ªïi c·ª≠a m·ªói 0.1s
// Sau 5 gi√¢y th√¨ d·ª´ng
   setTimeout(() => {
   clearInterval(interval);
   doors.forEach(d => d.classList.remove("highlight", "dim"));
   if (callback) callback();
   }, 5000);
}

  
 function highlightWinner(winnerName) {
  const doors = document.querySelectorAll(".door");
  doors.forEach(d => d.classList.remove("winner"));
  doors.forEach(door => {
  const img = door.querySelector("img");
  if (img && img.alt === winnerName) {   // so s√°nh theo alt
  door.classList.add("winner");
  }
  door.classList.add("dim"); // l√†m m·ªù t·∫•t c·∫£
  if (door.dataset.name === winnerName) {
  door.classList.remove("dim"); // b·ªè m·ªù √¥ tr√∫ng
  door.classList.add("highlight"); // s√°ng √¥ tr√∫ng
  } else {
  door.classList.remove("highlight");
  }
  });
// Sau 5s reset l·∫°i b√¨nh th∆∞·ªùng
  setTimeout(() => {
  doors.forEach(door => {
  door.classList.remove("dim", "highlight");
  door.classList.remove("winner");
  });
  }, 5000);
}



  function unlockBets() {
  document.querySelectorAll('.chip, .bet-box').forEach(el => {
  el.classList.remove('lock-bets');
  });
  isSpinning = false;
}

  window.addEventListener("load", () => {
  // M·ªü kh√≥a chip + bet box khi F5
  document.querySelectorAll('.chip, .bet-box').forEach(el => {
  el.classList.remove('lock-bets');
  });
});


  function clearHot() {
  // X√≥a nh√£n trong bet-box & c·ª≠a
  document.querySelectorAll(".bet-box .hot-label").forEach(el => el.remove());
  document.querySelectorAll(".door .hot-label").forEach(el => el.remove());
  // X√≥a text ·ªü khu v·ª±c suggestion
  document.getElementById("suggestion").textContent = "";
  // X√≥a trong localStorage ƒë·ªÉ l·∫ßn sau suggestResult() s·∫Ω t·∫°o m·ªõi
  localStorage.removeItem("lastHot");
  localStorage.removeItem("lastHotName");
}

  function showResultModal(selected, totalBet, winAmount) {
  const modal = document.getElementById("resultModal");

  const spinNumber = getCurrentSpinNumber(); 
  document.getElementById("modalSpin").textContent = spinNumber;

  document.getElementById("modalResult").textContent = selected.icon;
  document.getElementById("modalWinner").textContent = `${selected.name}`;
  document.getElementById("modalBet").textContent = totalBet;
  document.getElementById("modalWin").textContent = winAmount;

  modal.classList.remove("hide");
  modal.style.display = "flex";

  // d√πng setTimeout ƒë·ªÉ ƒë·∫£m b·∫£o transition ch·∫°y
  setTimeout(() => {
    modal.classList.add("show");
  }, 10);

  // T·ª± ƒë·ªông ·∫©n sau 5 gi√¢y
  setTimeout(() => {
    closeResultModal();
  }, 5000);
}

  function closeResultModal() {
  const modal = document.getElementById("resultModal");
  modal.classList.remove("show");
  modal.classList.add("hide");

  // Ch·ªù animation xong m·ªõi ·∫©n h·∫≥n
  setTimeout(() => {
  modal.style.display = "none";
  modal.classList.remove("hide");
  }, 400);
}

// ESC ƒë·ªÉ ƒë√≥ng modal
  document.addEventListener("keydown", function(event) {
  if (event.key === "Escape") {
  const modal = document.getElementById("resultModal");
  if (modal && modal.style.display !== "none") {
  closeResultModal();
  }
  }
});

// Click ra ngo√†i modal-box ƒë·ªÉ ƒë√≥ng
  document.getElementById("resultModal").addEventListener("click", function(e) {
  if (e.target === this) {  // ch·ªâ khi click ƒë√∫ng n·ªÅn ƒëen b√™n ngo√†i
  closeResultModal();
  }
});

  function animateNumber(element, start, end, duration = 500) {
  let startTime = null;
  function step(timestamp) {
  if (!startTime) startTime = timestamp;
  const progress = Math.min((timestamp - startTime) / duration, 1);
  const value = Math.floor(progress * (end - start) + start);
  element.textContent = value.toLocaleString("vi-VN") + " xu";
  if (progress < 1) {
  requestAnimationFrame(step);
  }
  }
  requestAnimationFrame(step);
// Hi·ªáu ·ª©ng flash
  element.classList.add("flash-update");
  setTimeout(() => element.classList.remove("flash-update"), 600);
}

function lockDoors() {
  document.querySelectorAll(".door").forEach(door => door.classList.add("locked"));
}

function unlockDoors() {
  document.querySelectorAll(".door").forEach(door => door.classList.remove("locked"));
}

 


</script>
<div id="jackpotEffect"></div>

</body>
</html>
